datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

type Numeric = Float

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["windows", "debian-openssl-1.1.x"]
  output          = "../prisma/generated/client"
  previewFeatures = ["connectOrCreate", "atomicNumberOperations"]
}

generator typegraphql {
  provider = "node ../src/cli/dev.ts"
  output   = "../prisma/generated/type-graphql"
  emitDMMF = true
}

// Role enum comment
/// Role enum doc
enum Role {
  USER
  ADMIN
}

// User model comment
/// User model doc
/// @@TypeGraphQL.type(name: "Client")
model User {
  // User model field comment
  /// User model field doc
  id          Int     @default(autoincrement()) @id
  email       String  @unique
  /// renamed field doc
  /// @TypeGraphQL.field(name: "firstName")
  name        String?
  age         Int
  /// @TypeGraphQL.field(name: "accountBalance")
  balance     Numeric
  amount      Float
  /// @TypeGraphQL.field(name: "clientPosts")
  posts       post[]  @relation("posts")
  role        Role
  /// @TypeGraphQL.omit(output: true)
  editorPosts post[]  @relation("editorPosts")
}

enum PostKind {
  BLOG
  ADVERT
}

model post {
  uuid      String    @default(uuid()) @id
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  published Boolean
  title     String
  /// @TypeGraphQL.omit(output: true)
  subtitle  String
  content   String?
  author    User      @relation(fields: [authorId], references: [id], name: "posts")
  authorId  Int
  /// @TypeGraphQL.omit(output: true)
  editor    User?      @relation(fields: [editorId], references: [id], name: "editorPosts")
  /// @TypeGraphQL.omit(output: true)
  editorId  Int?
  kind      PostKind?
  metadata  Json
}

model Category {
  name   String
  slug   String
  number Int

  @@unique([slug, number])
}

model Patient {
  firstName String
  lastName  String
  email     String

  @@id([firstName, lastName])
}

model Movie {
  directorFirstName String
  directorLastName  String
  director          Director @relation(fields: [directorFirstName, directorLastName], references: [firstName, lastName])
  title             String

  @@id([directorFirstName, directorLastName, title])
}

model Director {
  firstName String
  lastName  String
  movies    Movie[]

  @@id([firstName, lastName])
}

model Problem {
  id          Int       @default(autoincrement()) @id
  problemText String
  likedBy     Creator[]
  creator     Creator?  @relation(name: "creator", fields: [creatorId], references: [id])
  creatorId   Int?
}

model Creator {
  id       Int       @default(autoincrement()) @id
  name     String
  likes    Problem[]
  problems Problem[] @relation("creator")
}
