# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregateCategory {
  count(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): Int!
}

type AggregateClient {
  count(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, orderBy: ClientOrderByInput, skip: Int, where: ClientWhereInput): Int!
}

type AggregateDirector {
  count(after: DirectorWhereUniqueInput, before: DirectorWhereUniqueInput, first: Int, last: Int, orderBy: DirectorOrderByInput, skip: Int, where: DirectorWhereInput): Int!
}

type AggregateMovie {
  count(after: MovieWhereUniqueInput, before: MovieWhereUniqueInput, first: Int, last: Int, orderBy: MovieOrderByInput, skip: Int, where: MovieWhereInput): Int!
}

type AggregatePatient {
  count(after: PatientWhereUniqueInput, before: PatientWhereUniqueInput, first: Int, last: Int, orderBy: PatientOrderByInput, skip: Int, where: PatientWhereInput): Int!
}

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Category {
  name: String!
  number: Int!
  slug: String!
}

input CategoryCreateInput {
  name: String!
  number: Int!
  slug: String!
}

input CategoryOrderByInput {
  name: OrderByArg
  number: OrderByArg
  slug: OrderByArg
}

input CategoryUpdateInput {
  name: String
  number: Int
  slug: String
}

input CategoryUpdateManyMutationInput {
  name: String
  number: Int
  slug: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  name: StringFilter
  NOT: [CategoryWhereInput!]
  number: IntFilter
  OR: [CategoryWhereInput!]
  slug: StringFilter
}

input CategoryWhereUniqueInput {
  slug_number: SlugNumberCompoundUniqueInput
}

type Client {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  hello: String!
  id: Int!
  name: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  role: Role!
}

input ClientCreateInput {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
  role: Role!
}

input ClientCreateOneWithoutPostsInput {
  connect: ClientWhereUniqueInput
  create: ClientCreateWithoutPostsInput
}

input ClientCreateWithoutPostsInput {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  name: String
  role: Role!
}

input ClientOrderByInput {
  age: OrderByArg
  amount: OrderByArg
  balance: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  role: OrderByArg
}

input ClientUpdateInput {
  age: Int
  amount: Float
  balance: Float
  email: String
  id: Int
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  role: Role
}

input ClientUpdateManyMutationInput {
  age: Int
  amount: Float
  balance: Float
  email: String
  id: Int
  name: String
  role: Role
}

input ClientWhereInput {
  age: IntFilter
  amount: FloatFilter
  AND: [ClientWhereInput!]
  balance: FloatFilter
  email: StringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  posts: PostFilter
  role: RoleFilter
}

input ClientWhereUniqueInput {
  email: String
  id: Int
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type Director {
  firstName: String!
  lastName: String!
  movies(after: MovieWhereUniqueInput, before: MovieWhereUniqueInput, first: Int, last: Int, orderBy: MovieOrderByInput, skip: Int, where: MovieWhereInput): [Movie!]
}

input DirectorCreateInput {
  firstName: String!
  lastName: String!
  movies: MovieCreateManyWithoutDirectorInput
}

input DirectorCreateOneWithoutMoviesInput {
  connect: DirectorWhereUniqueInput
  create: DirectorCreateWithoutMoviesInput
}

input DirectorCreateWithoutMoviesInput {
  firstName: String!
  lastName: String!
}

input DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput {
  directorFirstName: String!
  directorLastName: String!
  title: String!
}

input DirectorOrderByInput {
  firstName: OrderByArg
  lastName: OrderByArg
}

input DirectorUpdateInput {
  firstName: String
  lastName: String
  movies: MovieUpdateManyWithoutDirectorInput
}

input DirectorUpdateManyMutationInput {
  firstName: String
  lastName: String
}

input DirectorUpdateOneRequiredWithoutMoviesInput {
  connect: DirectorWhereUniqueInput
  create: DirectorCreateWithoutMoviesInput
  update: DirectorUpdateWithoutMoviesDataInput
  upsert: DirectorUpsertWithoutMoviesInput
}

input DirectorUpdateWithoutMoviesDataInput {
  firstName: String
  lastName: String
}

input DirectorUpsertWithoutMoviesInput {
  create: DirectorCreateWithoutMoviesInput!
  update: DirectorUpdateWithoutMoviesDataInput!
}

input DirectorWhereInput {
  AND: [DirectorWhereInput!]
  firstName: StringFilter
  lastName: StringFilter
  movies: MovieFilter
  NOT: [DirectorWhereInput!]
  OR: [DirectorWhereInput!]
}

input DirectorWhereUniqueInput {
  firstName_lastName: FirstNameLastNameCompoundUniqueInput
}

input FirstNameLastNameCompoundUniqueInput {
  firstName: String!
  lastName: String!
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Movie {
  director: Director!
  directorFirstName: String!
  directorLastName: String!
  title: String!
}

input MovieCreateInput {
  director: DirectorCreateOneWithoutMoviesInput!
  title: String!
}

input MovieCreateManyWithoutDirectorInput {
  connect: [MovieWhereUniqueInput!]
  create: [MovieCreateWithoutDirectorInput!]
}

input MovieCreateWithoutDirectorInput {
  title: String!
}

input MovieFilter {
  every: MovieWhereInput
  none: MovieWhereInput
  some: MovieWhereInput
}

input MovieOrderByInput {
  directorFirstName: OrderByArg
  directorLastName: OrderByArg
  title: OrderByArg
}

input MovieScalarWhereInput {
  AND: [MovieScalarWhereInput!]
  directorFirstName: StringFilter
  directorLastName: StringFilter
  NOT: [MovieScalarWhereInput!]
  OR: [MovieScalarWhereInput!]
  title: StringFilter
}

input MovieUpdateInput {
  director: DirectorUpdateOneRequiredWithoutMoviesInput
  title: String
}

input MovieUpdateManyDataInput {
  title: String
}

input MovieUpdateManyMutationInput {
  title: String
}

input MovieUpdateManyWithoutDirectorInput {
  connect: [MovieWhereUniqueInput!]
  create: [MovieCreateWithoutDirectorInput!]
  delete: [MovieWhereUniqueInput!]
  deleteMany: [MovieScalarWhereInput!]
  disconnect: [MovieWhereUniqueInput!]
  set: [MovieWhereUniqueInput!]
  update: [MovieUpdateWithWhereUniqueWithoutDirectorInput!]
  updateMany: [MovieUpdateManyWithWhereNestedInput!]
  upsert: [MovieUpsertWithWhereUniqueWithoutDirectorInput!]
}

input MovieUpdateManyWithWhereNestedInput {
  data: MovieUpdateManyDataInput!
  where: MovieScalarWhereInput!
}

input MovieUpdateWithoutDirectorDataInput {
  title: String
}

input MovieUpdateWithWhereUniqueWithoutDirectorInput {
  data: MovieUpdateWithoutDirectorDataInput!
  where: MovieWhereUniqueInput!
}

input MovieUpsertWithWhereUniqueWithoutDirectorInput {
  create: MovieCreateWithoutDirectorInput!
  update: MovieUpdateWithoutDirectorDataInput!
  where: MovieWhereUniqueInput!
}

input MovieWhereInput {
  AND: [MovieWhereInput!]
  director: DirectorWhereInput
  directorFirstName: StringFilter
  directorLastName: StringFilter
  NOT: [MovieWhereInput!]
  OR: [MovieWhereInput!]
  title: StringFilter
}

input MovieWhereUniqueInput {
  directorFirstName_directorLastName_title: DirectorFirstNameDirectorLastNameTitleCompoundUniqueInput
}

type Mutation {
  createCategory(data: CategoryCreateInput!): Category!
  createClient(data: ClientCreateInput!): Client!
  createDirector(data: DirectorCreateInput!): Director!
  createMovie(data: MovieCreateInput!): Movie!
  createPatient(data: PatientCreateInput!): Patient!
  createPost(data: PostCreateInput!): Post!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteDirector(where: DirectorWhereUniqueInput!): Director
  deleteManyCategory(where: CategoryWhereInput): BatchPayload!
  deleteManyClient(where: ClientWhereInput): BatchPayload!
  deleteManyDirector(where: DirectorWhereInput): BatchPayload!
  deleteManyMovie(where: MovieWhereInput): BatchPayload!
  deleteManyPatient(where: PatientWhereInput): BatchPayload!
  deleteMovie(where: MovieWhereUniqueInput!): Movie
  deletePatient(where: PatientWhereUniqueInput!): Patient
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  updateClient(data: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client
  updateDirector(data: DirectorUpdateInput!, where: DirectorWhereUniqueInput!): Director
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): BatchPayload!
  updateManyClient(data: ClientUpdateManyMutationInput!, where: ClientWhereInput): BatchPayload!
  updateManyDirector(data: DirectorUpdateManyMutationInput!, where: DirectorWhereInput): BatchPayload!
  updateManyMovie(data: MovieUpdateManyMutationInput!, where: MovieWhereInput): BatchPayload!
  updateManyPatient(data: PatientUpdateManyMutationInput!, where: PatientWhereInput): BatchPayload!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateMovie(data: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie
  updatePatient(data: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient
  upsertCategory(create: CategoryCreateInput!, update: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category!
  upsertClient(create: ClientCreateInput!, update: ClientUpdateInput!, where: ClientWhereUniqueInput!): Client!
  upsertDirector(create: DirectorCreateInput!, update: DirectorUpdateInput!, where: DirectorWhereUniqueInput!): Director!
  upsertMovie(create: MovieCreateInput!, update: MovieUpdateInput!, where: MovieWhereUniqueInput!): Movie!
  upsertPatient(create: PatientCreateInput!, update: PatientUpdateInput!, where: PatientWhereUniqueInput!): Patient!
}

input NullablePostKindFilter {
  equals: PostKind
  in: [PostKind!]
  not: PostKind
  notIn: [PostKind!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Patient {
  email: String!
  firstName: String!
  lastName: String!
}

input PatientCreateInput {
  email: String!
  firstName: String!
  lastName: String!
}

input PatientOrderByInput {
  email: OrderByArg
  firstName: OrderByArg
  lastName: OrderByArg
}

input PatientUpdateInput {
  email: String
  firstName: String
  lastName: String
}

input PatientUpdateManyMutationInput {
  email: String
  firstName: String
  lastName: String
}

input PatientWhereInput {
  AND: [PatientWhereInput!]
  email: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  NOT: [PatientWhereInput!]
  OR: [PatientWhereInput!]
}

input PatientWhereUniqueInput {
  firstName_lastName: FirstNameLastNameCompoundUniqueInput
}

type Post {
  author: Client!
  authorId: Int!
  content: String
  createdAt: DateTime!
  kind: PostKind
  metadata: JSON!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  uuid: String!
}

input PostCreateInput {
  author: ClientCreateOneWithoutPostsInput!
  content: String
  createdAt: DateTime
  kind: PostKind
  metadata: JSON!
  published: Boolean!
  title: String!
  updatedAt: DateTime
  uuid: String
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  metadata: JSON!
  published: Boolean!
  title: String!
  updatedAt: DateTime
  uuid: String
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

enum PostKind {
  ADVERT
  BLOG
}

input PostOrderByInput {
  authorId: OrderByArg
  content: OrderByArg
  createdAt: OrderByArg
  kind: OrderByArg
  metadata: OrderByArg
  published: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  uuid: OrderByArg
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: IntFilter
  content: NullableStringFilter
  createdAt: DateTimeFilter
  kind: NullablePostKindFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: UUIDFilter
}

input PostUpdateManyDataInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  metadata: JSON
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  metadata: JSON
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateWithoutAuthorDataInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  metadata: JSON
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: ClientWhereInput
  authorId: IntFilter
  content: NullableStringFilter
  createdAt: DateTimeFilter
  kind: NullablePostKindFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: UUIDFilter
}

input PostWhereUniqueInput {
  uuid: String
}

type Query {
  aggregateCategory: AggregateCategory!
  aggregateClient: AggregateClient!
  aggregateDirector: AggregateDirector!
  aggregateMovie: AggregateMovie!
  aggregatePatient: AggregatePatient!
  allClients: [Client!]!
  allPosts: [Post!]!
  categories(after: CategoryWhereUniqueInput, before: CategoryWhereUniqueInput, first: Int, last: Int, orderBy: CategoryOrderByInput, skip: Int, where: CategoryWhereInput): [Category!]!
  category(where: CategoryWhereUniqueInput!): Category
  client(where: ClientWhereUniqueInput!): Client
  clients(after: ClientWhereUniqueInput, before: ClientWhereUniqueInput, first: Int, last: Int, orderBy: ClientOrderByInput, skip: Int, where: ClientWhereInput): [Client!]!
  director(where: DirectorWhereUniqueInput!): Director
  directors(after: DirectorWhereUniqueInput, before: DirectorWhereUniqueInput, first: Int, last: Int, orderBy: DirectorOrderByInput, skip: Int, where: DirectorWhereInput): [Director!]!
  movie(where: MovieWhereUniqueInput!): Movie
  movies(after: MovieWhereUniqueInput, before: MovieWhereUniqueInput, first: Int, last: Int, orderBy: MovieOrderByInput, skip: Int, where: MovieWhereInput): [Movie!]!
  patient(where: PatientWhereUniqueInput!): Patient
  patients(after: PatientWhereUniqueInput, before: PatientWhereUniqueInput, first: Int, last: Int, orderBy: PatientOrderByInput, skip: Int, where: PatientWhereInput): [Patient!]!
  post(where: PostWhereUniqueInput!): Post
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]!
}

enum Role {
  ADMIN
  USER
}

input RoleFilter {
  equals: Role
  in: [Role!]
  not: Role
  notIn: [Role!]
}

input SlugNumberCompoundUniqueInput {
  number: Int!
  slug: String!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

input UUIDFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}
