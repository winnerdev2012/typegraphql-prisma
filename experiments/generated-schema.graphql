# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

type Mutation {
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deleteOneUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertOneUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NullablePostKindFilter {
  equals: PostKind
  in: [PostKind!]
  not: PostKind
  notIn: [PostKind!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

enum OrderByArg {
  asc
  desc
}

type Post {
  author: User!
  content: String
  createdAt: DateTime!
  kind: PostKind
  published: Boolean!
  title: String!
  updatedAt: DateTime!
  uuid: String!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  content: String
  createdAt: DateTime
  kind: PostKind
  published: Boolean!
  title: String!
  updatedAt: DateTime
  uuid: String
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  published: Boolean!
  title: String!
  updatedAt: DateTime
  uuid: String
}

input PostFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

enum PostKind {
  ADVERT
  BLOG
}

input PostOrderByInput {
  content: OrderByArg
  createdAt: OrderByArg
  kind: OrderByArg
  published: OrderByArg
  title: OrderByArg
  updatedAt: OrderByArg
  uuid: OrderByArg
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  content: NullableStringFilter
  createdAt: DateTimeFilter
  kind: NullablePostKindFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: StringFilter
}

input PostUpdateManyDataInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateManyMutationInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: PostScalarWhereInput!
}

input PostUpdateWithoutAuthorDataInput {
  content: String
  createdAt: DateTime
  kind: PostKind
  published: Boolean
  title: String
  updatedAt: DateTime
  uuid: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserWhereInput
  content: NullableStringFilter
  createdAt: DateTimeFilter
  kind: NullablePostKindFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  published: BooleanFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  uuid: StringFilter
}

input PostWhereUniqueInput {
  uuid: String
}

type Query {
  allPosts: [Post!]!
  allUsers: [User!]!
  findOnePost(where: PostWhereUniqueInput!): Post
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
}

"""Role enum comment"""
enum Role {
  ADMIN
  USER
}

input RoleFilter {
  equals: Role
  in: [Role!]
  not: Role
  notIn: [Role!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

"""User model comment"""
type User {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  hello: String!

  """User model field comment"""
  id: Int!
  name: String
  posts(after: PostWhereUniqueInput, before: PostWhereUniqueInput, first: Int, last: Int, orderBy: PostOrderByInput, skip: Int, where: PostWhereInput): [Post!]
  role: Role!
}

input UserCreateInput {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  name: String
  posts: PostCreateManyWithoutAuthorInput
  role: Role!
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
  age: Int!
  amount: Float!
  balance: Float!
  email: String!
  name: String
  role: Role!
}

input UserOrderByInput {
  age: OrderByArg
  amount: OrderByArg
  balance: OrderByArg
  email: OrderByArg
  id: OrderByArg
  name: OrderByArg
  role: OrderByArg
}

input UserUpdateInput {
  age: Int
  amount: Float
  balance: Float
  email: String
  id: Int
  name: String
  posts: PostUpdateManyWithoutAuthorInput
  role: Role
}

input UserUpdateManyMutationInput {
  age: Int
  amount: Float
  balance: Float
  email: String
  id: Int
  name: String
  role: Role
}

input UserWhereInput {
  age: IntFilter
  amount: FloatFilter
  AND: [UserWhereInput!]
  balance: FloatFilter
  email: StringFilter
  id: IntFilter
  name: NullableStringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostFilter
  role: RoleFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}
