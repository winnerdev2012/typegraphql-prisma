query GetClientsAndPosts {
  clients {
    ...ClientData
    advertPosts: clientPosts(where: { kind: { equals: ADVERT } }) {
      ...PostData
    }
    blogPosts: clientPosts(where: { kind: { equals: BLOG } }) {
      ...PostData
      author {
        clientPosts(where: { kind: { equals: ADVERT } }) {
          ...PostData
        }
      }
    }
    clientPosts {
      ...PostData
    }
  }
  allPosts {
    ...PostData
    author {
      ...ClientData
    }
  }
}

mutation AddClient {
  createClient(
    data: {
      age: 50
      amount: 123
      accountBalance: 50
      email: "test3@test3.test3"
      firstName: "Test"
      role: USER
    }
  ) {
    ...ClientData
  }
}

query MyFindClients {
  customFindClientsWithArgs(where: { accountBalance: { lte: 10 } }) {
    ...ClientData
  }
}

query FindClients {
  clients(
    orderBy: { id: desc }
    take: 2
    where: {
      OR: [{ email: { contains: "test3" } }, { role: { equals: ADMIN } }]
    }
    distinct: [firstName]
  ) {
    ...ClientData
  }
}

query SortAllClients {
  clients(orderBy: [{ firstName: asc }, { id: desc }]) {
    ...ClientData
  }
}

query FindClientsWithEmptyBalance {
  clients(where: { accountBalance: { equals: 0 } }) {
    ...ClientData
  }
}

query FindPostsOfAdmins {
  posts(where: { author: { is: { role: { equals: ADMIN } } } }) {
    ...PostData
    author {
      ...ClientData
    }
  }
}

fragment ClientData on Client {
  id
  email
  firstName
  age
  accountBalance
  amount
  role
  hello
  grades
  aliases
}

fragment PostData on Post {
  uuid
  createdAt
  updatedAt
  published
  title
  content
  kind
  metadata
}

query GetDirectorsWithMovies {
  directors {
    firstName
    lastName
    movies {
      title
    }
  }
}

query GetMoviesWithDirector {
  movies {
    title
    director {
      firstName
      lastName
    }
  }
}

query GetDirector {
  director(
    where: { firstName_lastName: { firstName: "Bob", lastName: "Nolan" } }
  ) {
    firstName
    lastName
  }
}

query GetMovie {
  movie(
    where: {
      directorFirstName_directorLastName_title: {
        directorFirstName: "Bob"
        directorLastName: "Nolan"
        title: "Hello World 2"
      }
    }
  ) {
    title
    directorFirstName
    directorLastName
  }
}

query CountBravoPatients {
  countBravoPatients: aggregatePatient(
    where: { lastName: { contains: "Bravo" } }
  ) {
    count {
      _all
    }
  }
}

query FilterPostsByJson {
  onWikiLeaks: posts(
    where: { metadata: { equals: { publishedOnWikiLeaks: true } } }
  ) {
    ...PostData
  }
  notPublishedAndOthers: posts(
    where: { metadata: { not: { publishedOnWikiLeaks: false } } }
  ) {
    ...PostData
  }
}

query AggregateClient {
  aggregateClient {
    count {
      _all
    }
    avg {
      age
    }
    sum {
      balance
      amount
    }
    min {
      age
    }
    max {
      age
    }
  }
}

# # incompatible with useUncheckedScalarInputs
# mutation ConnectOrCreateExample {
#   createPost(
#     data: {
#       title: "Test"
#       subtitle: "Test test"
#       metadata: {}
#       published: true
#       author: {
#         connectOrCreate: {
#           where: { id: 1 }
#           create: {
#             email: "test1@test.test"
#             accountBalance: 0
#             role: ADMIN
#             amount: 0
#             age: 11
#           }
#         }
#       }
#     }
#   ) {
#     ...PostData
#     author {
#       ...ClientData
#     }
#   }
# }

# # incompatible with useUncheckedScalarInputs
# mutation UncheckedInputsExample {
#   createPost(
#     data: {
#       title: "Test"
#       subtitle: "Test test"
#       metadata: {}
#       published: true
#       authorId: 1
#     }
#   ) {
#     ...PostData
#     author {
#       ...ClientData
#     }
#   }
# }

mutation AtomicNumberOperations {
  updateClient(
    data: { accountBalance: { increment: 100 } }
    where: { email: "test1@test.test" }
  ) {
    ...ClientData
  }
}

query ForbiddenCategories {
  categories {
    name
    slug
    number
  }
}

query GroupPosts {
  groupByPost(by: [kind], where: { author: { is: { id: { equals: 2 } } } }) {
    kind
    count {
      _all
    }
  }
}

query SortByRelation {
  posts(take: 5, orderBy: [{ author: { role: asc } }, { title: desc }]) {
    title
    author {
      firstName
      role
    }
  }
}

mutation CreateManyProblems {
  createManyProblem(
    data: [{ problemText: "problem1" }, { problemText: "problem2" }]
  ) {
    count
  }
}

query GetNativeTypesFields {
  nativeTypeModels {
    id
    bigInt
    byteA
    decimal
  }
}

mutation InsertNativeTypesFields {
  createNativeTypeModel(
    data: { bigInt: "987654321000000", decimal: "73.12", byteA: "BAgPEBcq" }
  ) {
    id
    bigInt
    byteA
    decimal
  }
}

mutation AddGrade {
  updateClient(where: { id: 1 }, data: { grades: { push: 5 } }) {
    ...ClientData
  }
}
