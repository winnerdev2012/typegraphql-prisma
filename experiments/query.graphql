query GetClientsAndPosts {
  clients {
    ...ClientData
    advertPosts: clientPosts(where: { kind: { equals: ADVERT } }) {
      ...PostData
    }
    blogPosts: clientPosts(where: { kind: { equals: BLOG } }) {
      ...PostData
      author {
        clientPosts(where: { kind: { equals: ADVERT } }) {
          ...PostData
        }
      }
    }
    clientPosts {
      ...PostData
    }
  }
  allPosts {
    ...PostData
    author {
      ...ClientData
    }
  }
}

mutation AddClient {
  createClient(
    data: {
      age: 50
      amount: 123
      accountBalance: 0
      email: "test3@test3.test3"
      firstName: "Test"
      role: USER
    }
  ) {
    ...ClientData
  }
}

query MyFindClients {
  customFindClientsWithArgs(where: { accountBalance: { gte: 10 } }) {
    id
    email
    accountBalance
  }
}

query FindClients {
  clients(
    orderBy: { id: desc }
    take: 2
    where: {
      OR: [{ email: { contains: "test3" } }, { role: { equals: ADMIN } }]
    }
  ) {
    ...ClientData
  }
}

fragment ClientData on Client {
  id
  email
  firstName
  age
  accountBalance
  amount
  role
  hello
}

fragment PostData on Post {
  uuid
  createdAt
  updatedAt
  published
  title
  content
  kind
  metadata
}

query GetDirectorsWithMovies {
  directors {
    firstName
    lastName
    movies {
      title
    }
  }
}

query GetMoviesWithDirector {
  movies {
    title
    director {
      firstName
      lastName
    }
  }
}

query GetDirector {
  director(
    where: { firstName_lastName: { firstName: "Bob", lastName: "Nolan" } }
  ) {
    firstName
    lastName
  }
}

query GetMovie {
  movie(
    where: {
      directorFirstName_directorLastName_title: {
        directorFirstName: "Bob"
        directorLastName: "Nolan"
        title: "Hello World 2"
      }
    }
  ) {
    title
    directorFirstName
    directorLastName
  }
}

query CountBravoPatients {
  countBravoPatients: aggregatePatient {
    count(where: { lastName: { contains: "Bravo" } })
  }
}

query FilterPostsByJson {
  onWikiLeaks: posts(
    where: { metadata: { equals: { publishedOnWikiLeaks: true } } }
  ) {
    uuid
    title
  }
  notPublishedAndOthers: posts(
    where: { metadata: { not: { publishedOnWikiLeaks: false } } }
  ) {
    uuid
    title
  }
}
