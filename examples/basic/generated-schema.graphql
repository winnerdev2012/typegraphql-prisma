# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregatePost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BasePost {
  id: String!
  createdAt: String!
  updatedAt: String!
  published: Boolean!
  title: String!
  content: String
  author: BaseUser
}

type BaseUser {
  id: String!
  email: String!
  name: String
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasePost!]
  favoritePost: BasePost
}

type BatchPayload {
  count: Int!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input DateTimeFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

type Mutation {
  createOneUser(data: UserCreateInput!): BaseUser!
  deleteOneUser(where: UserWhereUniqueInput!): BaseUser
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): BaseUser
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertOneUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): BaseUser!
  createOnePost(data: PostCreateInput!): BasePost!
  deleteOnePost(where: PostWhereUniqueInput!): BasePost
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): BasePost
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  upsertOnePost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): BasePost!
}

input NullableStringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

enum OrderByArg {
  asc
  desc
}

input PostCreateInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean!
  title: String!
  content: String
  author: UserCreateOneWithoutAuthorInput
}

input PostCreateManyWithoutPostsInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
}

input PostCreateWithoutAuthorInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean!
  title: String!
  content: String
}

input PostFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostOrderByInput {
  id: OrderByArg
  createdAt: OrderByArg
  updatedAt: OrderByArg
  published: OrderByArg
  title: OrderByArg
  content: OrderByArg
}

input PostScalarWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  published: BooleanFilter
  title: StringFilter
  content: NullableStringFilter
  AND: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  NOT: [PostScalarWhereInput!]
}

input PostUpdateInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean
  title: String
  content: String
  author: UserUpdateOneWithoutPostsInput
}

input PostUpdateManyDataInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyMutationInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean
  title: String
  content: String
}

input PostUpdateManyWithoutAuthorInput {
  create: [PostCreateWithoutAuthorInput!]
  connect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  disconnect: [PostWhereUniqueInput!]
  delete: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  deleteMany: [PostScalarWhereInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  where: PostScalarWhereInput!
  data: PostUpdateManyDataInput!
}

input PostUpdateWithoutAuthorDataInput {
  id: ID
  createdAt: String
  updatedAt: String
  published: Boolean
  title: String
  content: String
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  data: PostUpdateWithoutAuthorDataInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  where: PostWhereUniqueInput!
  update: PostUpdateWithoutAuthorDataInput!
  create: PostCreateWithoutAuthorInput!
}

input PostWhereInput {
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  published: BooleanFilter
  title: StringFilter
  content: NullableStringFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  findOneUser(where: UserWhereUniqueInput!): BaseUser
  findManyUser(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BaseUser!]
  aggregateUser: AggregateUser!
  findOnePost(where: PostWhereUniqueInput!): BasePost
  findManyPost(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BasePost!]
  aggregatePost: AggregatePost!
  bestUser: BaseUser!
}

input StringFilter {
  equals: String
  not: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
}

input UserCreateInput {
  id: ID
  email: String!
  name: String
  posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPostsInput {
  id: ID
  email: String!
  name: String
}

input UserOrderByInput {
  id: OrderByArg
  email: OrderByArg
  name: OrderByArg
}

input UserUpdateInput {
  id: ID
  email: String
  name: String
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  id: ID
  email: String
  name: String
}

input UserUpdateOneWithoutPostsInput {
  create: UserCreateWithoutPostsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsDataInput {
  id: ID
  email: String
  name: String
}

input UserUpsertWithoutPostsInput {
  update: UserUpdateWithoutPostsDataInput!
  create: UserCreateWithoutPostsInput!
}

input UserWhereInput {
  id: StringFilter
  email: StringFilter
  name: NullableStringFilter
  posts: PostFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
