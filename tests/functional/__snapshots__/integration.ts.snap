// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator integration should be able to use generate TypeGraphQL classes files to generate GraphQL schema: graphQLSchemaSDL 1`] = `
"# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AggregatePost {
  avg: PostAvgAggregate
  count: Int!
  max: PostMaxAggregate
  min: PostMinAggregate
  sum: PostSumAggregate
}

type AggregateUser {
  avg: UserAvgAggregate
  count: Int!
  max: UserMaxAggregate
  min: UserMinAggregate
  sum: UserSumAggregate
}

type BatchPayload {
  count: Int!
}

enum Color {
  BLUE
  GREEN
  RED
}

input EnumColorFieldUpdateOperationsInput {
  set: Color
}

input EnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createUser(data: UserCreateInput!): User!
  deleteManyPost(where: PostWhereInput): BatchPayload!
  deleteManyUser(where: UserWhereInput): BatchPayload!
  deletePost(where: PostWhereUniqueInput!): Post
  deleteUser(where: UserWhereUniqueInput!): User
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertPost(create: PostCreateInput!, update: PostUpdateInput!, where: PostWhereUniqueInput!): Post!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

input NestedEnumColorFilter {
  equals: Color
  in: [Color!]
  not: NestedEnumColorFilter
  notIn: [Color!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Post {
  author: User!
  authorId: Int!
  color: Color!
  content: String!
  uuid: String!
}

type PostAvgAggregate {
  authorId: Float!
}

input PostCreateInput {
  author: UserCreateOneWithoutPostsInput!
  color: Color!
  content: String!
  uuid: String
}

input PostCreateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateOrConnectWithoutauthorInput {
  create: PostCreateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostCreateWithoutAuthorInput {
  color: Color!
  content: String!
  uuid: String
}

enum PostDistinctFieldEnum {
  authorId
  color
  content
  uuid
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

type PostMaxAggregate {
  authorId: Int!
}

type PostMinAggregate {
  authorId: Int!
}

input PostOrderByInput {
  authorId: SortOrder
  color: SortOrder
  content: SortOrder
  uuid: SortOrder
}

input PostScalarWhereInput {
  AND: [PostScalarWhereInput!]
  authorId: IntFilter
  color: EnumColorFilter
  content: StringFilter
  NOT: [PostScalarWhereInput!]
  OR: [PostScalarWhereInput!]
  uuid: StringFilter
}

type PostSumAggregate {
  authorId: Int!
}

input PostUpdateInput {
  author: UserUpdateOneRequiredWithoutPostsInput
  color: EnumColorFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input PostUpdateManyMutationInput {
  color: EnumColorFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  connectOrCreate: [PostCreateOrConnectWithoutauthorInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [PostScalarWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereWithoutAuthorInput {
  data: PostUpdateManyMutationInput!
  where: PostScalarWhereInput!
}

input PostUpdateWithoutAuthorInput {
  color: EnumColorFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  uuid: StringFieldUpdateOperationsInput
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorInput!
  where: PostWhereUniqueInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  author: UserRelationFilter
  authorId: IntFilter
  color: EnumColorFilter
  content: StringFilter
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  uuid: StringFilter
}

input PostWhereUniqueInput {
  uuid: String
}

type Query {
  aggregatePost(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): AggregatePost!
  aggregateUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  findFirstPost(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): Post
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): User
  post(where: PostWhereUniqueInput!): Post
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserDistinctFieldEnum!], orderBy: [UserOrderByInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type User {
  id: Int!
  name: String
  posts(cursor: PostWhereUniqueInput, distinct: [PostDistinctFieldEnum!], orderBy: [PostOrderByInput!], skip: Int, take: Int, where: PostWhereInput): [Post!]
}

type UserAvgAggregate {
  id: Float!
}

input UserCreateInput {
  name: String
  posts: PostCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOrConnectWithoutpostsInput {
  create: UserCreateWithoutPostsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutPostsInput {
  name: String
}

enum UserDistinctFieldEnum {
  id
  name
}

type UserMaxAggregate {
  id: Int!
}

type UserMinAggregate {
  id: Int!
}

input UserOrderByInput {
  id: SortOrder
  name: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

type UserSumAggregate {
  id: Int!
}

input UserUpdateInput {
  name: NullableStringFieldUpdateOperationsInput
  posts: PostUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutPostsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutpostsInput
  create: UserCreateWithoutPostsInput
  update: UserUpdateWithoutPostsInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutPostsInput {
  name: NullableStringFieldUpdateOperationsInput
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  id: IntFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  posts: PostListRelationFilter
}

input UserWhereUniqueInput {
  id: Int
}
"
`;

exports[`generator integration should generates TypeGraphQL classes files to output folder by running \`prisma generate\`: files structure 1`] = `
"
[type-graphql]
  enhance.ts
  [enums]
    Color.ts
    PostDistinctFieldEnum.ts
    QueryMode.ts
    SortOrder.ts
    UserDistinctFieldEnum.ts
    index.ts
  index.ts
  [models]
    Post.ts
    User.ts
    index.ts
  [resolvers]
    [crud]
      [Post]
        AggregatePostResolver.ts
        CreatePostResolver.ts
        DeleteManyPostResolver.ts
        DeletePostResolver.ts
        FindFirstPostResolver.ts
        FindManyPostResolver.ts
        FindUniquePostResolver.ts
        PostCrudResolver.ts
        UpdateManyPostResolver.ts
        UpdatePostResolver.ts
        UpsertPostResolver.ts
        [args]
          AggregatePostArgs.ts
          CreatePostArgs.ts
          DeleteManyPostArgs.ts
          DeletePostArgs.ts
          FindFirstPostArgs.ts
          FindManyPostArgs.ts
          FindUniquePostArgs.ts
          UpdateManyPostArgs.ts
          UpdatePostArgs.ts
          UpsertPostArgs.ts
          index.ts
      [User]
        AggregateUserResolver.ts
        CreateUserResolver.ts
        DeleteManyUserResolver.ts
        DeleteUserResolver.ts
        FindFirstUserResolver.ts
        FindManyUserResolver.ts
        FindUniqueUserResolver.ts
        UpdateManyUserResolver.ts
        UpdateUserResolver.ts
        UpsertUserResolver.ts
        UserCrudResolver.ts
        [args]
          AggregateUserArgs.ts
          CreateUserArgs.ts
          DeleteManyUserArgs.ts
          DeleteUserArgs.ts
          FindFirstUserArgs.ts
          FindManyUserArgs.ts
          FindUniqueUserArgs.ts
          UpdateManyUserArgs.ts
          UpdateUserArgs.ts
          UpsertUserArgs.ts
          index.ts
      args.index.ts
      index.ts
      resolvers-actions.index.ts
      resolvers-crud.index.ts
    [inputs]
      EnumColorFieldUpdateOperationsInput.ts
      EnumColorFilter.ts
      IntFilter.ts
      NestedEnumColorFilter.ts
      NestedIntFilter.ts
      NestedStringFilter.ts
      NestedStringNullableFilter.ts
      NullableStringFieldUpdateOperationsInput.ts
      PostCreateInput.ts
      PostCreateManyWithoutAuthorInput.ts
      PostCreateOrConnectWithoutauthorInput.ts
      PostCreateWithoutAuthorInput.ts
      PostListRelationFilter.ts
      PostOrderByInput.ts
      PostScalarWhereInput.ts
      PostUpdateInput.ts
      PostUpdateManyMutationInput.ts
      PostUpdateManyWithWhereWithoutAuthorInput.ts
      PostUpdateManyWithoutAuthorInput.ts
      PostUpdateWithWhereUniqueWithoutAuthorInput.ts
      PostUpdateWithoutAuthorInput.ts
      PostUpsertWithWhereUniqueWithoutAuthorInput.ts
      PostWhereInput.ts
      PostWhereUniqueInput.ts
      StringFieldUpdateOperationsInput.ts
      StringFilter.ts
      StringNullableFilter.ts
      UserCreateInput.ts
      UserCreateOneWithoutPostsInput.ts
      UserCreateOrConnectWithoutpostsInput.ts
      UserCreateWithoutPostsInput.ts
      UserOrderByInput.ts
      UserRelationFilter.ts
      UserUpdateInput.ts
      UserUpdateManyMutationInput.ts
      UserUpdateOneRequiredWithoutPostsInput.ts
      UserUpdateWithoutPostsInput.ts
      UserUpsertWithoutPostsInput.ts
      UserWhereInput.ts
      UserWhereUniqueInput.ts
      index.ts
    [outputs]
      AggregatePost.ts
      AggregateUser.ts
      BatchPayload.ts
      PostAvgAggregate.ts
      PostMaxAggregate.ts
      PostMinAggregate.ts
      PostSumAggregate.ts
      UserAvgAggregate.ts
      UserMaxAggregate.ts
      UserMinAggregate.ts
      UserSumAggregate.ts
      index.ts
    [relations]
      [Post]
        PostRelationsResolver.ts
      [User]
        UserRelationsResolver.ts
        [args]
          UserPostsArgs.ts
          index.ts
      args.index.ts
      index.ts
      resolvers.index.ts
"
`;

exports[`generator integration should properly fetch the data from DB using PrismaClient while queried by GraphQL schema: graphql data 1`] = `
Object {
  "users": Array [
    Object {
      "id": 1,
      "name": "test1",
      "posts": Array [],
    },
    Object {
      "id": 2,
      "name": "test2",
      "posts": Array [
        Object {
          "author": Object {
            "name": "test2",
          },
          "color": "RED",
          "content": "post content",
        },
      ],
    },
  ],
}
`;
