// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`relations resolvers generation should properly generate args class for array relation resolvers: UserPostsArgs 1`] = `
"import { Arg, Args, ArgsType, Ctx, Field, FieldResolver, Float, ID, InputType, Int, Mutation, ObjectType, Query, Resolver, Root, registerEnumType } from \\"type-graphql\\";
import { PostOrderByInput } from \\"../../../inputs/PostOrderByInput\\";
import { PostWhereInput } from \\"../../../inputs/PostWhereInput\\";
import { PostWhereUniqueInput } from \\"../../../inputs/PostWhereUniqueInput\\";

@ArgsType()
export class UserPostsArgs {
  @Field(_type => PostWhereInput, { nullable: true })
  where?: PostWhereInput | null;

  @Field(_type => PostOrderByInput, { nullable: true })
  orderBy?: PostOrderByInput | null;

  @Field(_type => Int, { nullable: true })
  skip?: number | null;

  @Field(_type => PostWhereUniqueInput, { nullable: true })
  after?: PostWhereUniqueInput | null;

  @Field(_type => PostWhereUniqueInput, { nullable: true })
  before?: PostWhereUniqueInput | null;

  @Field(_type => Int, { nullable: true })
  first?: number | null;

  @Field(_type => Int, { nullable: true })
  last?: number | null;
}
"
`;

exports[`relations resolvers generation should properly generate resolvers classes for prisma models with cyclic relations: Post 1`] = `
"import { Arg, Args, ArgsType, Ctx, Field, FieldResolver, Float, ID, InputType, Int, Mutation, ObjectType, Query, Resolver, Root, registerEnumType } from \\"type-graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";

@Resolver(_of => Post)
export class PostRelationsResolver {
  @FieldResolver(_type => User, {
    nullable: true,
    description: \\"author field doc\\",
  })
  async author(@Root() post: Post, @Ctx() ctx: any): Promise<User | null> {
    return ctx.prisma.post.findOne({
      where: {
        uuid: post.uuid,
      },
    }).author({});
  }
}
"
`;

exports[`relations resolvers generation should properly generate resolvers classes for prisma models with cyclic relations: User 1`] = `
"import { Arg, Args, ArgsType, Ctx, Field, FieldResolver, Float, ID, InputType, Int, Mutation, ObjectType, Query, Resolver, Root, registerEnumType } from \\"type-graphql\\";
import { Post } from \\"../../../models/Post\\";
import { User } from \\"../../../models/User\\";
import { UserPostsArgs } from \\"./args/UserPostsArgs\\";

@Resolver(_of => User)
export class UserRelationsResolver {
  @FieldResolver(_type => [Post], {
    nullable: true,
    description: undefined,
  })
  async posts(@Root() user: User, @Ctx() ctx: any, @Args() args: UserPostsArgs): Promise<Post[] | null> {
    return ctx.prisma.user.findOne({
      where: {
        id: user.id,
      },
    }).posts(args);
  }
}
"
`;
