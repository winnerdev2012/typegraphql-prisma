// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inputs should properly generate input type class for filtering by enums values: EnumColorFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedEnumColorFilter } from \\"../inputs/NestedEnumColorFilter\\";
import { Color } from \\"../../enums/Color\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class EnumColorFilter {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  equals?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  in?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  notIn?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => NestedEnumColorFilter, {
    nullable: true
  })
  not?: NestedEnumColorFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type class for filtering by enums values: NestedEnumColorFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { Color } from \\"../../enums/Color\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedEnumColorFilter {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  equals?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  in?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => [Color], {
    nullable: true
  })
  notIn?: Array<\\"RED\\" | \\"GREEN\\" | \\"BLUE\\"> | undefined;

  @TypeGraphQL.Field(_type => NestedEnumColorFilter, {
    nullable: true
  })
  not?: NestedEnumColorFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type class for filtering by enums values: index 1`] = `
"export { EnumColorFieldUpdateOperationsInput } from \\"./EnumColorFieldUpdateOperationsInput\\";
export { EnumColorFilter } from \\"./EnumColorFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedEnumColorFilter } from \\"./NestedEnumColorFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput\\";
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserCreateOneWithoutPostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateOrConnectWithoutpostsFieldInput } from \\"../inputs/UserCreateOrConnectWithoutpostsFieldInput\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserCreateOneWithoutPostsFieldInput {
  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: true
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  connect?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => UserCreateOrConnectWithoutpostsFieldInput, {
    nullable: true
  })
  connectOrCreate?: UserCreateOrConnectWithoutpostsFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserCreateOrConnectWithoutpostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserCreateOrConnectWithoutpostsFieldInput {
  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: false
  })
  where!: UserWhereUniqueInput;

  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: false
  })
  create!: UserCreateWithoutPostsFieldInput;
}
"
`;

exports[`inputs should properly generate input type classes for connectOrCreate: UserUpdateOneRequiredWithoutPostsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { UserCreateOrConnectWithoutpostsFieldInput } from \\"../inputs/UserCreateOrConnectWithoutpostsFieldInput\\";
import { UserCreateWithoutPostsFieldInput } from \\"../inputs/UserCreateWithoutPostsFieldInput\\";
import { UserUpdateWithoutPostsFieldInput } from \\"../inputs/UserUpdateWithoutPostsFieldInput\\";
import { UserUpsertWithoutPostsFieldInput } from \\"../inputs/UserUpsertWithoutPostsFieldInput\\";
import { UserWhereUniqueInput } from \\"../inputs/UserWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class UserUpdateOneRequiredWithoutPostsFieldInput {
  @TypeGraphQL.Field(_type => UserCreateWithoutPostsFieldInput, {
    nullable: true
  })
  create?: UserCreateWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserWhereUniqueInput, {
    nullable: true
  })
  connect?: UserWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => UserUpdateWithoutPostsFieldInput, {
    nullable: true
  })
  update?: UserUpdateWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserUpsertWithoutPostsFieldInput, {
    nullable: true
  })
  upsert?: UserUpsertWithoutPostsFieldInput | undefined;

  @TypeGraphQL.Field(_type => UserCreateOrConnectWithoutpostsFieldInput, {
    nullable: true
  })
  connectOrCreate?: UserCreateOrConnectWithoutpostsFieldInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { BoolFilter } from \\"../inputs/BoolFilter\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { JsonFilter } from \\"../inputs/JsonFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";
import { StringNullableFilter } from \\"../inputs/StringNullableFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelWhereInput {
  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  AND?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  OR?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleModelWhereInput], {
    nullable: true
  })
  NOT?: SampleModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intIdField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  stringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringNullableFilter, {
    nullable: true
  })
  optionalStringField?: StringNullableFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => BoolFilter, {
    nullable: true
  })
  booleanField?: BoolFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeFilter, {
    nullable: true
  })
  dateField?: DateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => JsonFilter, {
    nullable: true
  })
  jsonField?: JsonFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: SampleModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  intIdField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput\\";
export { BoolFilter } from \\"./BoolFilter\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput\\";
export { DateTimeFilter } from \\"./DateTimeFilter\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { JsonFilter } from \\"./JsonFilter\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
export { StringNullableFilter } from \\"./StringNullableFilter\\";
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  AND?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  OR?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelScalarWhereInput], {
    nullable: true
  })
  NOT?: FirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { SecondModelListRelationFilter } from \\"../inputs/SecondModelListRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  AND?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  OR?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  NOT?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => SecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: SecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: FirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by many to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput\\";
export { FirstModelCreateManyWithoutSecondModelsFieldInput } from \\"./FirstModelCreateManyWithoutSecondModelsFieldInput\\";
export { FirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput\\";
export { FirstModelListRelationFilter } from \\"./FirstModelListRelationFilter\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput\\";
export { FirstModelScalarWhereInput } from \\"./FirstModelScalarWhereInput\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput\\";
export { FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateManyWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateManyWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput\\";
export { FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput\\";
export { SecondModelCreateManyWithoutFirstModelsFieldInput } from \\"./SecondModelCreateManyWithoutFirstModelsFieldInput\\";
export { SecondModelCreateOrConnectWithoutfirstModelsFieldInput } from \\"./SecondModelCreateOrConnectWithoutfirstModelsFieldInput\\";
export { SecondModelCreateWithoutFirstModelsFieldInput } from \\"./SecondModelCreateWithoutFirstModelsFieldInput\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput\\";
export { SecondModelUpdateManyWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelsFieldInput\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput\\";
export { SecondModelUpdateWithoutFirstModelsFieldInput } from \\"./SecondModelUpdateWithoutFirstModelsFieldInput\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelWhereInput } from \\"../inputs/FirstModelWhereInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelRelationFilter {
  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  is?: FirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereInput, {
    nullable: true
  })
  isNot?: FirstModelWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { SecondModelListRelationFilter } from \\"../inputs/SecondModelListRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereInput {
  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  AND?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  OR?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [FirstModelWhereInput], {
    nullable: true
  })
  NOT?: FirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => SecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: SecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: FirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelListRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SecondModelWhereInput } from \\"../inputs/SecondModelWhereInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelListRelationFilter {
  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  every?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  some?: SecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelWhereInput, {
    nullable: true
  })
  none?: SecondModelWhereInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstModelFieldId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  AND?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  OR?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelScalarWhereInput], {
    nullable: true
  })
  NOT?: SecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelRelationFilter } from \\"../inputs/FirstModelRelationFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelWhereInput {
  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  AND?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  OR?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SecondModelWhereInput], {
    nullable: true
  })
  NOT?: SecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => FirstModelRelationFilter, {
    nullable: true
  })
  firstModelField?: FirstModelRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: SecondModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SecondModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput\\";
export { FirstModelCreateOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOneWithoutSecondModelsFieldInput\\";
export { FirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput\\";
export { SecondModelCreateManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateManyWithoutFirstModelFieldInput\\";
export { SecondModelCreateOrConnectWithoutfirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutfirstModelFieldInput\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: BoolFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedBoolFilter } from \\"../inputs/NestedBoolFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  not?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: DateTimeFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedDateTimeFilter } from \\"../inputs/NestedDateTimeFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  not?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: FloatFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  not?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: IntFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  not?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: JsonFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class JsonFilter {
  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  equals?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  not?: Prisma.InputJsonValue | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedBoolFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedBoolFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  not?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedDateTimeFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedDateTimeFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  not?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedFloatFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedFloatFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  not?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedIntFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedIntFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  not?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: NestedStringNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class NestedStringNullableFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => NestedStringNullableFilter, {
    nullable: true
  })
  not?: NestedStringNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedStringFilter } from \\"../inputs/NestedStringFilter\\";
import { QueryMode } from \\"../../enums/QueryMode\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  not?: NestedStringFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: StringNullableFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedStringNullableFilter } from \\"../inputs/NestedStringNullableFilter\\";
import { QueryMode } from \\"../../enums/QueryMode\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringNullableFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringNullableFilter, {
    nullable: true
  })
  not?: NestedStringNullableFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for filtering scalar fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput\\";
export { BoolFilter } from \\"./BoolFilter\\";
export { BoolNullableFilter } from \\"./BoolNullableFilter\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput\\";
export { DateTimeFilter } from \\"./DateTimeFilter\\";
export { DateTimeNullableFilter } from \\"./DateTimeNullableFilter\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { FloatNullableFilter } from \\"./FloatNullableFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { IntNullableFilter } from \\"./IntNullableFilter\\";
export { JsonFilter } from \\"./JsonFilter\\";
export { JsonNullableFilter } from \\"./JsonNullableFilter\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter\\";
export { NestedBoolNullableFilter } from \\"./NestedBoolNullableFilter\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter\\";
export { NestedDateTimeNullableFilter } from \\"./NestedDateTimeNullableFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter\\";
export { NullableBoolFieldUpdateOperationsInput } from \\"./NullableBoolFieldUpdateOperationsInput\\";
export { NullableDateTimeFieldUpdateOperationsInput } from \\"./NullableDateTimeFieldUpdateOperationsInput\\";
export { NullableFloatFieldUpdateOperationsInput } from \\"./NullableFloatFieldUpdateOperationsInput\\";
export { NullableIntFieldUpdateOperationsInput } from \\"./NullableIntFieldUpdateOperationsInput\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
export { StringNullableFilter } from \\"./StringNullableFilter\\";
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorFirstNameLastNameCompoundUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorFirstNameLastNameCompoundUniqueInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  firstName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  lastName!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  lastName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  age?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { MovieListRelationFilter } from \\"../inputs/MovieListRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorWhereInput {
  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  AND?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  OR?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [DirectorWhereInput], {
    nullable: true
  })
  NOT?: DirectorWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  firstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  lastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  age?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => MovieListRelationFilter, {
    nullable: true
  })
  movies?: MovieListRelationFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: DirectorWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DirectorFirstNameLastNameCompoundUniqueInput } from \\"../inputs/DirectorFirstNameLastNameCompoundUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DirectorWhereUniqueInput {
  @TypeGraphQL.Field(_type => DirectorFirstNameLastNameCompoundUniqueInput, {
    nullable: true
  })
  firstName_lastName?: DirectorFirstNameLastNameCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with composite unique index: index 1`] = `
"export { DirectorCreateInput } from \\"./DirectorCreateInput\\";
export { DirectorCreateOneWithoutMoviesInput } from \\"./DirectorCreateOneWithoutMoviesInput\\";
export { DirectorCreateOrConnectWithoutmoviesInput } from \\"./DirectorCreateOrConnectWithoutmoviesInput\\";
export { DirectorCreateWithoutMoviesInput } from \\"./DirectorCreateWithoutMoviesInput\\";
export { DirectorFirstNameLastNameCompoundUniqueInput } from \\"./DirectorFirstNameLastNameCompoundUniqueInput\\";
export { DirectorOrderByInput } from \\"./DirectorOrderByInput\\";
export { DirectorRelationFilter } from \\"./DirectorRelationFilter\\";
export { DirectorUpdateInput } from \\"./DirectorUpdateInput\\";
export { DirectorUpdateManyMutationInput } from \\"./DirectorUpdateManyMutationInput\\";
export { DirectorUpdateOneRequiredWithoutMoviesInput } from \\"./DirectorUpdateOneRequiredWithoutMoviesInput\\";
export { DirectorUpdateWithoutMoviesInput } from \\"./DirectorUpdateWithoutMoviesInput\\";
export { DirectorUpsertWithoutMoviesInput } from \\"./DirectorUpsertWithoutMoviesInput\\";
export { DirectorWhereInput } from \\"./DirectorWhereInput\\";
export { DirectorWhereUniqueInput } from \\"./DirectorWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { MovieCreateInput } from \\"./MovieCreateInput\\";
export { MovieCreateManyWithoutDirectorInput } from \\"./MovieCreateManyWithoutDirectorInput\\";
export { MovieCreateOrConnectWithoutdirectorInput } from \\"./MovieCreateOrConnectWithoutdirectorInput\\";
export { MovieCreateWithoutDirectorInput } from \\"./MovieCreateWithoutDirectorInput\\";
export { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"./MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput\\";
export { MovieListRelationFilter } from \\"./MovieListRelationFilter\\";
export { MovieOrderByInput } from \\"./MovieOrderByInput\\";
export { MovieScalarWhereInput } from \\"./MovieScalarWhereInput\\";
export { MovieUpdateInput } from \\"./MovieUpdateInput\\";
export { MovieUpdateManyMutationInput } from \\"./MovieUpdateManyMutationInput\\";
export { MovieUpdateManyWithWhereWithoutDirectorInput } from \\"./MovieUpdateManyWithWhereWithoutDirectorInput\\";
export { MovieUpdateManyWithoutDirectorInput } from \\"./MovieUpdateManyWithoutDirectorInput\\";
export { MovieUpdateWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpdateWithWhereUniqueWithoutDirectorInput\\";
export { MovieUpdateWithoutDirectorInput } from \\"./MovieUpdateWithoutDirectorInput\\";
export { MovieUpsertWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpsertWithWhereUniqueWithoutDirectorInput\\";
export { MovieWhereInput } from \\"./MovieWhereInput\\";
export { MovieWhereUniqueInput } from \\"./MovieWhereUniqueInput\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  directorFirstName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  directorLastName!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  title!: string;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  directorFirstName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  directorLastName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  title?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  rating?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieScalarWhereInput {
  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  AND?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  OR?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieScalarWhereInput], {
    nullable: true
  })
  NOT?: MovieScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorFirstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorLastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  title?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  rating?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { DirectorRelationFilter } from \\"../inputs/DirectorRelationFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieWhereInput {
  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  AND?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  OR?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [MovieWhereInput], {
    nullable: true
  })
  NOT?: MovieWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorFirstName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  directorLastName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => DirectorRelationFilter, {
    nullable: true
  })
  director?: DirectorRelationFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  title?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  rating?: FloatFilter | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: MovieWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"../inputs/MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class MovieWhereUniqueInput {
  @TypeGraphQL.Field(_type => MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput, {
    nullable: true
  })
  directorFirstName_directorLastName_title?: MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for model with id keys with relation: index 1`] = `
"export { DirectorCreateInput } from \\"./DirectorCreateInput\\";
export { DirectorCreateOneWithoutMoviesInput } from \\"./DirectorCreateOneWithoutMoviesInput\\";
export { DirectorCreateOrConnectWithoutmoviesInput } from \\"./DirectorCreateOrConnectWithoutmoviesInput\\";
export { DirectorCreateWithoutMoviesInput } from \\"./DirectorCreateWithoutMoviesInput\\";
export { DirectorFirstNameLastNameCompoundUniqueInput } from \\"./DirectorFirstNameLastNameCompoundUniqueInput\\";
export { DirectorOrderByInput } from \\"./DirectorOrderByInput\\";
export { DirectorRelationFilter } from \\"./DirectorRelationFilter\\";
export { DirectorUpdateInput } from \\"./DirectorUpdateInput\\";
export { DirectorUpdateManyMutationInput } from \\"./DirectorUpdateManyMutationInput\\";
export { DirectorUpdateOneRequiredWithoutMoviesInput } from \\"./DirectorUpdateOneRequiredWithoutMoviesInput\\";
export { DirectorUpdateWithoutMoviesInput } from \\"./DirectorUpdateWithoutMoviesInput\\";
export { DirectorUpsertWithoutMoviesInput } from \\"./DirectorUpsertWithoutMoviesInput\\";
export { DirectorWhereInput } from \\"./DirectorWhereInput\\";
export { DirectorWhereUniqueInput } from \\"./DirectorWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { MovieCreateInput } from \\"./MovieCreateInput\\";
export { MovieCreateManyWithoutDirectorInput } from \\"./MovieCreateManyWithoutDirectorInput\\";
export { MovieCreateOrConnectWithoutdirectorInput } from \\"./MovieCreateOrConnectWithoutdirectorInput\\";
export { MovieCreateWithoutDirectorInput } from \\"./MovieCreateWithoutDirectorInput\\";
export { MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput } from \\"./MovieDirectorFirstNameDirectorLastNameTitleCompoundUniqueInput\\";
export { MovieListRelationFilter } from \\"./MovieListRelationFilter\\";
export { MovieOrderByInput } from \\"./MovieOrderByInput\\";
export { MovieScalarWhereInput } from \\"./MovieScalarWhereInput\\";
export { MovieUpdateInput } from \\"./MovieUpdateInput\\";
export { MovieUpdateManyMutationInput } from \\"./MovieUpdateManyMutationInput\\";
export { MovieUpdateManyWithWhereWithoutDirectorInput } from \\"./MovieUpdateManyWithWhereWithoutDirectorInput\\";
export { MovieUpdateManyWithoutDirectorInput } from \\"./MovieUpdateManyWithoutDirectorInput\\";
export { MovieUpdateWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpdateWithWhereUniqueWithoutDirectorInput\\";
export { MovieUpdateWithoutDirectorInput } from \\"./MovieUpdateWithoutDirectorInput\\";
export { MovieUpsertWithWhereUniqueWithoutDirectorInput } from \\"./MovieUpsertWithWhereUniqueWithoutDirectorInput\\";
export { MovieWhereInput } from \\"./MovieWhereInput\\";
export { MovieWhereUniqueInput } from \\"./MovieWhereUniqueInput\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: BoolFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  set?: boolean | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: DateTimeFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  set?: Date | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: EnumColorFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { Color } from \\"../../enums/Color\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class EnumColorFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => Color, {
    nullable: true
  })
  set?: \\"RED\\" | \\"GREEN\\" | \\"BLUE\\" | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: FloatFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  set?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  increment?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  decrement?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  multiply?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  divide?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: IntFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  set?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  increment?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  decrement?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  multiply?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  divide?: number | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { BoolFieldUpdateOperationsInput } from \\"../inputs/BoolFieldUpdateOperationsInput\\";
import { DateTimeFieldUpdateOperationsInput } from \\"../inputs/DateTimeFieldUpdateOperationsInput\\";
import { EnumColorFieldUpdateOperationsInput } from \\"../inputs/EnumColorFieldUpdateOperationsInput\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput\\";
import { NullableBoolFieldUpdateOperationsInput } from \\"../inputs/NullableBoolFieldUpdateOperationsInput\\";
import { NullableDateTimeFieldUpdateOperationsInput } from \\"../inputs/NullableDateTimeFieldUpdateOperationsInput\\";
import { NullableEnumColorFieldUpdateOperationsInput } from \\"../inputs/NullableEnumColorFieldUpdateOperationsInput\\";
import { NullableFloatFieldUpdateOperationsInput } from \\"../inputs/NullableFloatFieldUpdateOperationsInput\\";
import { NullableIntFieldUpdateOperationsInput } from \\"../inputs/NullableIntFieldUpdateOperationsInput\\";
import { NullableStringFieldUpdateOperationsInput } from \\"../inputs/NullableStringFieldUpdateOperationsInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdateInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  stringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableStringFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalStringField?: NullableStringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  intField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableIntFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalIntField?: NullableIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableFloatFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalFloatField?: NullableFloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => BoolFieldUpdateOperationsInput, {
    nullable: true
  })
  booleanField?: BoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBoolFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalBooleanField?: NullableBoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => DateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  dateField?: DateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalDateField?: NullableDateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  jsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => EnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  enumField?: EnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableEnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalEnumField?: NullableEnumColorFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: SampleModelUpdateManyMutationInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { BoolFieldUpdateOperationsInput } from \\"../inputs/BoolFieldUpdateOperationsInput\\";
import { DateTimeFieldUpdateOperationsInput } from \\"../inputs/DateTimeFieldUpdateOperationsInput\\";
import { EnumColorFieldUpdateOperationsInput } from \\"../inputs/EnumColorFieldUpdateOperationsInput\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput\\";
import { NullableBoolFieldUpdateOperationsInput } from \\"../inputs/NullableBoolFieldUpdateOperationsInput\\";
import { NullableDateTimeFieldUpdateOperationsInput } from \\"../inputs/NullableDateTimeFieldUpdateOperationsInput\\";
import { NullableEnumColorFieldUpdateOperationsInput } from \\"../inputs/NullableEnumColorFieldUpdateOperationsInput\\";
import { NullableFloatFieldUpdateOperationsInput } from \\"../inputs/NullableFloatFieldUpdateOperationsInput\\";
import { NullableIntFieldUpdateOperationsInput } from \\"../inputs/NullableIntFieldUpdateOperationsInput\\";
import { NullableStringFieldUpdateOperationsInput } from \\"../inputs/NullableStringFieldUpdateOperationsInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleModelUpdateManyMutationInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  stringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableStringFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalStringField?: NullableStringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  intField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableIntFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalIntField?: NullableIntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableFloatFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalFloatField?: NullableFloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => BoolFieldUpdateOperationsInput, {
    nullable: true
  })
  booleanField?: BoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableBoolFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalBooleanField?: NullableBoolFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => DateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  dateField?: DateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableDateTimeFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalDateField?: NullableDateTimeFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  jsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  optionalJsonField?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => EnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  enumField?: EnumColorFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => NullableEnumColorFieldUpdateOperationsInput, {
    nullable: true
  })
  optionalEnumField?: NullableEnumColorFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: StringFieldUpdateOperationsInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringFieldUpdateOperationsInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  set?: string | undefined;
}
"
`;

exports[`inputs should properly generate input type classes for updating scalar fields: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput\\";
export { BoolFilter } from \\"./BoolFilter\\";
export { BoolNullableFilter } from \\"./BoolNullableFilter\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput\\";
export { DateTimeFilter } from \\"./DateTimeFilter\\";
export { DateTimeNullableFilter } from \\"./DateTimeNullableFilter\\";
export { EnumColorFieldUpdateOperationsInput } from \\"./EnumColorFieldUpdateOperationsInput\\";
export { EnumColorFilter } from \\"./EnumColorFilter\\";
export { EnumColorNullableFilter } from \\"./EnumColorNullableFilter\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { FloatNullableFilter } from \\"./FloatNullableFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { IntNullableFilter } from \\"./IntNullableFilter\\";
export { JsonFilter } from \\"./JsonFilter\\";
export { JsonNullableFilter } from \\"./JsonNullableFilter\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter\\";
export { NestedBoolNullableFilter } from \\"./NestedBoolNullableFilter\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter\\";
export { NestedDateTimeNullableFilter } from \\"./NestedDateTimeNullableFilter\\";
export { NestedEnumColorFilter } from \\"./NestedEnumColorFilter\\";
export { NestedEnumColorNullableFilter } from \\"./NestedEnumColorNullableFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedFloatNullableFilter } from \\"./NestedFloatNullableFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedIntNullableFilter } from \\"./NestedIntNullableFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { NestedStringNullableFilter } from \\"./NestedStringNullableFilter\\";
export { NullableBoolFieldUpdateOperationsInput } from \\"./NullableBoolFieldUpdateOperationsInput\\";
export { NullableDateTimeFieldUpdateOperationsInput } from \\"./NullableDateTimeFieldUpdateOperationsInput\\";
export { NullableEnumColorFieldUpdateOperationsInput } from \\"./NullableEnumColorFieldUpdateOperationsInput\\";
export { NullableFloatFieldUpdateOperationsInput } from \\"./NullableFloatFieldUpdateOperationsInput\\";
export { NullableIntFieldUpdateOperationsInput } from \\"./NullableIntFieldUpdateOperationsInput\\";
export { NullableStringFieldUpdateOperationsInput } from \\"./NullableStringFieldUpdateOperationsInput\\";
export { SampleModelCreateInput } from \\"./SampleModelCreateInput\\";
export { SampleModelOrderByInput } from \\"./SampleModelOrderByInput\\";
export { SampleModelUpdateInput } from \\"./SampleModelUpdateInput\\";
export { SampleModelUpdateManyMutationInput } from \\"./SampleModelUpdateManyMutationInput\\";
export { SampleModelWhereInput } from \\"./SampleModelWhereInput\\";
export { SampleModelWhereUniqueInput } from \\"./SampleModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
export { StringNullableFilter } from \\"./StringNullableFilter\\";
"
`;

exports[`inputs should properly generate input type classes when model field is renamed: SampleOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  modelFieldName?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: \\"asc\\" | \\"desc\\" | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs should properly generate input type classes when model field is renamed: SampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleWhereInput {
  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  AND?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  OR?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  NOT?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  modelFieldName?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  get mappedFieldName() {
    return this.modelFieldName;
  }

  set mappedFieldName(modelFieldName: StringFilter | undefined) {
    this.modelFieldName = modelFieldName;
  }
}
"
`;

exports[`inputs should properly generate input type classes when model field is renamed: index 1`] = `
"export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { SampleCreateInput } from \\"./SampleCreateInput\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput\\";
export { SampleWhereInput } from \\"./SampleWhereInput\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper ScalarWhereWithAggregatesInput for model: SampleScalarWhereWithAggregatesInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { BoolWithAggregatesFilter } from \\"../inputs/BoolWithAggregatesFilter\\";
import { DateTimeWithAggregatesFilter } from \\"../inputs/DateTimeWithAggregatesFilter\\";
import { FloatWithAggregatesFilter } from \\"../inputs/FloatWithAggregatesFilter\\";
import { IntWithAggregatesFilter } from \\"../inputs/IntWithAggregatesFilter\\";
import { JsonWithAggregatesFilter } from \\"../inputs/JsonWithAggregatesFilter\\";
import { StringWithAggregatesFilter } from \\"../inputs/StringWithAggregatesFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleScalarWhereWithAggregatesInput {
  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  AND?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  OR?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleScalarWhereWithAggregatesInput], {
    nullable: true
  })
  NOT?: SampleScalarWhereWithAggregatesInput[] | undefined;

  @TypeGraphQL.Field(_type => IntWithAggregatesFilter, {
    nullable: true
  })
  idField?: IntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => StringWithAggregatesFilter, {
    nullable: true
  })
  stringField?: StringWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => FloatWithAggregatesFilter, {
    nullable: true
  })
  floatField?: FloatWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => IntWithAggregatesFilter, {
    nullable: true
  })
  intField?: IntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => BoolWithAggregatesFilter, {
    nullable: true
  })
  booleanField?: BoolWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeWithAggregatesFilter, {
    nullable: true
  })
  dateField?: DateTimeWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => JsonWithAggregatesFilter, {
    nullable: true
  })
  jsonField?: JsonWithAggregatesFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: BoolWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedBoolFilter } from \\"../inputs/NestedBoolFilter\\";
import { NestedBoolWithAggregatesFilter } from \\"../inputs/NestedBoolWithAggregatesFilter\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class BoolWithAggregatesFilter {
  @TypeGraphQL.Field(_type => Boolean, {
    nullable: true
  })
  equals?: boolean | undefined;

  @TypeGraphQL.Field(_type => NestedBoolWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedBoolWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  min?: NestedBoolFilter | undefined;

  @TypeGraphQL.Field(_type => NestedBoolFilter, {
    nullable: true
  })
  max?: NestedBoolFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: DateTimeWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedDateTimeFilter } from \\"../inputs/NestedDateTimeFilter\\";
import { NestedDateTimeWithAggregatesFilter } from \\"../inputs/NestedDateTimeWithAggregatesFilter\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class DateTimeWithAggregatesFilter {
  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  equals?: Date | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  in?: Date[] | undefined;

  @TypeGraphQL.Field(_type => [Date], {
    nullable: true
  })
  notIn?: Date[] | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  lte?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gt?: Date | undefined;

  @TypeGraphQL.Field(_type => Date, {
    nullable: true
  })
  gte?: Date | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedDateTimeWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  min?: NestedDateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => NestedDateTimeFilter, {
    nullable: true
  })
  max?: NestedDateTimeFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: FloatWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter\\";
import { NestedFloatWithAggregatesFilter } from \\"../inputs/NestedFloatWithAggregatesFilter\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FloatWithAggregatesFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Float], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedFloatWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedFloatWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  avg?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  sum?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  min?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  max?: NestedFloatFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: IntWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedFloatFilter } from \\"../inputs/NestedFloatFilter\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";
import { NestedIntWithAggregatesFilter } from \\"../inputs/NestedIntWithAggregatesFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class IntWithAggregatesFilter {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  equals?: number | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  in?: number[] | undefined;

  @TypeGraphQL.Field(_type => [TypeGraphQL.Int], {
    nullable: true
  })
  notIn?: number[] | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  lte?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gt?: number | undefined;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  gte?: number | undefined;

  @TypeGraphQL.Field(_type => NestedIntWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedIntWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedFloatFilter, {
    nullable: true
  })
  avg?: NestedFloatFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  sum?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  min?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  max?: NestedIntFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: JsonWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";
import { NestedJsonFilter } from \\"../inputs/NestedJsonFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class JsonWithAggregatesFilter {
  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  equals?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => GraphQLJSON, {
    nullable: true
  })
  not?: Prisma.InputJsonValue | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedJsonFilter, {
    nullable: true
  })
  min?: NestedJsonFilter | undefined;

  @TypeGraphQL.Field(_type => NestedJsonFilter, {
    nullable: true
  })
  max?: NestedJsonFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: StringWithAggregatesFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { NestedIntFilter } from \\"../inputs/NestedIntFilter\\";
import { NestedStringFilter } from \\"../inputs/NestedStringFilter\\";
import { NestedStringWithAggregatesFilter } from \\"../inputs/NestedStringWithAggregatesFilter\\";
import { QueryMode } from \\"../../enums/QueryMode\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class StringWithAggregatesFilter {
  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  equals?: string | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  in?: string[] | undefined;

  @TypeGraphQL.Field(_type => [String], {
    nullable: true
  })
  notIn?: string[] | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  lte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gt?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  gte?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  contains?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  startsWith?: string | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  endsWith?: string | undefined;

  @TypeGraphQL.Field(_type => QueryMode, {
    nullable: true
  })
  mode?: \\"default\\" | \\"insensitive\\" | undefined;

  @TypeGraphQL.Field(_type => NestedStringWithAggregatesFilter, {
    nullable: true
  })
  not?: NestedStringWithAggregatesFilter | undefined;

  @TypeGraphQL.Field(_type => NestedIntFilter, {
    nullable: true
  })
  count?: NestedIntFilter | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  min?: NestedStringFilter | undefined;

  @TypeGraphQL.Field(_type => NestedStringFilter, {
    nullable: true
  })
  max?: NestedStringFilter | undefined;
}
"
`;

exports[`inputs when experimental feature \`groupBy\` is enabled should generate proper WithAggregatesFilter for scalars: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput\\";
export { BoolFilter } from \\"./BoolFilter\\";
export { BoolWithAggregatesFilter } from \\"./BoolWithAggregatesFilter\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput\\";
export { DateTimeFilter } from \\"./DateTimeFilter\\";
export { DateTimeWithAggregatesFilter } from \\"./DateTimeWithAggregatesFilter\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { FloatWithAggregatesFilter } from \\"./FloatWithAggregatesFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { IntWithAggregatesFilter } from \\"./IntWithAggregatesFilter\\";
export { JsonFilter } from \\"./JsonFilter\\";
export { JsonWithAggregatesFilter } from \\"./JsonWithAggregatesFilter\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter\\";
export { NestedBoolWithAggregatesFilter } from \\"./NestedBoolWithAggregatesFilter\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter\\";
export { NestedDateTimeWithAggregatesFilter } from \\"./NestedDateTimeWithAggregatesFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedFloatWithAggregatesFilter } from \\"./NestedFloatWithAggregatesFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedIntWithAggregatesFilter } from \\"./NestedIntWithAggregatesFilter\\";
export { NestedJsonFilter } from \\"./NestedJsonFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { NestedStringWithAggregatesFilter } from \\"./NestedStringWithAggregatesFilter\\";
export { SampleCreateInput } from \\"./SampleCreateInput\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput\\";
export { SampleScalarWhereWithAggregatesInput } from \\"./SampleScalarWhereWithAggregatesInput\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput\\";
export { SampleWhereInput } from \\"./SampleWhereInput\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
export { StringWithAggregatesFilter } from \\"./StringWithAggregatesFilter\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelScalarWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { RenamedSecondModelListRelationFilter } from \\"../inputs/RenamedSecondModelListRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: RenamedSecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: RenamedFirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by many to many relation fields: index 1`] = `
"export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { RenamedFirstModelCreateInput } from \\"./RenamedFirstModelCreateInput\\";
export { RenamedFirstModelCreateManyWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateManyWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"./RenamedFirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
export { RenamedFirstModelCreateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelListRelationFilter } from \\"./RenamedFirstModelListRelationFilter\\";
export { RenamedFirstModelOrderByInput } from \\"./RenamedFirstModelOrderByInput\\";
export { RenamedFirstModelScalarWhereInput } from \\"./RenamedFirstModelScalarWhereInput\\";
export { RenamedFirstModelUpdateInput } from \\"./RenamedFirstModelUpdateInput\\";
export { RenamedFirstModelUpdateManyMutationInput } from \\"./RenamedFirstModelUpdateManyMutationInput\\";
export { RenamedFirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateManyWithWhereWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpdateManyWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateManyWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithWhereUniqueWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpdateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpsertWithWhereUniqueWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelWhereInput } from \\"./RenamedFirstModelWhereInput\\";
export { RenamedFirstModelWhereUniqueInput } from \\"./RenamedFirstModelWhereUniqueInput\\";
export { RenamedSecondModelCreateInput } from \\"./RenamedSecondModelCreateInput\\";
export { RenamedSecondModelCreateManyWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelCreateManyWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelCreateOrConnectWithoutfirstModelsFieldInput } from \\"./RenamedSecondModelCreateOrConnectWithoutfirstModelsFieldInput\\";
export { RenamedSecondModelCreateWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelCreateWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelListRelationFilter } from \\"./RenamedSecondModelListRelationFilter\\";
export { RenamedSecondModelOrderByInput } from \\"./RenamedSecondModelOrderByInput\\";
export { RenamedSecondModelScalarWhereInput } from \\"./RenamedSecondModelScalarWhereInput\\";
export { RenamedSecondModelUpdateInput } from \\"./RenamedSecondModelUpdateInput\\";
export { RenamedSecondModelUpdateManyMutationInput } from \\"./RenamedSecondModelUpdateManyMutationInput\\";
export { RenamedSecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateManyWithWhereWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelUpdateManyWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateManyWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelUpdateWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpdateWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput } from \\"./RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelsFieldInput\\";
export { RenamedSecondModelWhereInput } from \\"./RenamedSecondModelWhereInput\\";
export { RenamedSecondModelWhereUniqueInput } from \\"./RenamedSecondModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { RenamedFirstModelWhereInput } from \\"../inputs/RenamedFirstModelWhereInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelRelationFilter {
  @TypeGraphQL.Field(_type => RenamedFirstModelWhereInput, {
    nullable: true
  })
  is?: RenamedFirstModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedFirstModelWhereInput, {
    nullable: true
  })
  isNot?: RenamedFirstModelWhereInput | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { RenamedSecondModelListRelationFilter } from \\"../inputs/RenamedSecondModelListRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  AND?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  OR?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedFirstModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedFirstModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelListRelationFilter, {
    nullable: true
  })
  secondModelsField?: RenamedSecondModelListRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedFirstModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedFirstModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelListRelationFilter 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { RenamedSecondModelWhereInput } from \\"../inputs/RenamedSecondModelWhereInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelListRelationFilter {
  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  every?: RenamedSecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  some?: RenamedSecondModelWhereInput | undefined;

  @TypeGraphQL.Field(_type => RenamedSecondModelWhereInput, {
    nullable: true
  })
  none?: RenamedSecondModelWhereInput | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  idField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  uniqueStringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  firstModelFieldId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelScalarWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelScalarWhereInput {
  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  AND?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  OR?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelScalarWhereInput], {
    nullable: true
  })
  NOT?: RenamedSecondModelScalarWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { RenamedFirstModelRelationFilter } from \\"../inputs/RenamedFirstModelRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelWhereInput {
  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  AND?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  OR?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [RenamedSecondModelWhereInput], {
    nullable: true
  })
  NOT?: RenamedSecondModelWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  uniqueStringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  firstModelFieldId?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => RenamedFirstModelRelationFilter, {
    nullable: true
  })
  firstModelField?: RenamedFirstModelRelationFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: RenamedSecondModelWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class RenamedSecondModelWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  uniqueStringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { RenamedFirstModelCreateInput } from \\"./RenamedFirstModelCreateInput\\";
export { RenamedFirstModelCreateOneWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateOneWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"./RenamedFirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
export { RenamedFirstModelCreateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelCreateWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelOrderByInput } from \\"./RenamedFirstModelOrderByInput\\";
export { RenamedFirstModelRelationFilter } from \\"./RenamedFirstModelRelationFilter\\";
export { RenamedFirstModelUpdateInput } from \\"./RenamedFirstModelUpdateInput\\";
export { RenamedFirstModelUpdateManyMutationInput } from \\"./RenamedFirstModelUpdateManyMutationInput\\";
export { RenamedFirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateOneRequiredWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpdateWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpdateWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelUpsertWithoutSecondModelsFieldInput } from \\"./RenamedFirstModelUpsertWithoutSecondModelsFieldInput\\";
export { RenamedFirstModelWhereInput } from \\"./RenamedFirstModelWhereInput\\";
export { RenamedFirstModelWhereUniqueInput } from \\"./RenamedFirstModelWhereUniqueInput\\";
export { RenamedSecondModelCreateInput } from \\"./RenamedSecondModelCreateInput\\";
export { RenamedSecondModelCreateManyWithoutFirstModelFieldInput } from \\"./RenamedSecondModelCreateManyWithoutFirstModelFieldInput\\";
export { RenamedSecondModelCreateOrConnectWithoutfirstModelFieldInput } from \\"./RenamedSecondModelCreateOrConnectWithoutfirstModelFieldInput\\";
export { RenamedSecondModelCreateWithoutFirstModelFieldInput } from \\"./RenamedSecondModelCreateWithoutFirstModelFieldInput\\";
export { RenamedSecondModelListRelationFilter } from \\"./RenamedSecondModelListRelationFilter\\";
export { RenamedSecondModelOrderByInput } from \\"./RenamedSecondModelOrderByInput\\";
export { RenamedSecondModelScalarWhereInput } from \\"./RenamedSecondModelScalarWhereInput\\";
export { RenamedSecondModelUpdateInput } from \\"./RenamedSecondModelUpdateInput\\";
export { RenamedSecondModelUpdateManyMutationInput } from \\"./RenamedSecondModelUpdateManyMutationInput\\";
export { RenamedSecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateManyWithWhereWithoutFirstModelFieldInput\\";
export { RenamedSecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateManyWithoutFirstModelFieldInput\\";
export { RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput\\";
export { RenamedSecondModelUpdateWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpdateWithoutFirstModelFieldInput\\";
export { RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./RenamedSecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput\\";
export { RenamedSecondModelWhereInput } from \\"./RenamedSecondModelWhereInput\\";
export { RenamedSecondModelWhereUniqueInput } from \\"./RenamedSecondModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs when model is renamed should properly generate input type classes when model is renamed: ExampleOrderByInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SortOrder } from \\"../../enums/SortOrder\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleOrderByInput {
  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  intIdField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  stringField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  floatField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  booleanField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  dateField?: \\"asc\\" | \\"desc\\" | undefined;

  @TypeGraphQL.Field(_type => SortOrder, {
    nullable: true
  })
  otherId?: \\"asc\\" | \\"desc\\" | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes when model is renamed: ExampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { BoolFilter } from \\"../inputs/BoolFilter\\";
import { DateTimeFilter } from \\"../inputs/DateTimeFilter\\";
import { FloatFilter } from \\"../inputs/FloatFilter\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { OtherModelRelationFilter } from \\"../inputs/OtherModelRelationFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleWhereInput {
  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  AND?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  OR?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [ExampleWhereInput], {
    nullable: true
  })
  NOT?: ExampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  intIdField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  stringField?: StringFilter | undefined;

  @TypeGraphQL.Field(_type => FloatFilter, {
    nullable: true
  })
  floatField?: FloatFilter | undefined;

  @TypeGraphQL.Field(_type => BoolFilter, {
    nullable: true
  })
  booleanField?: BoolFilter | undefined;

  @TypeGraphQL.Field(_type => DateTimeFilter, {
    nullable: true
  })
  dateField?: DateTimeFilter | undefined;

  @TypeGraphQL.Field(_type => OtherModelRelationFilter, {
    nullable: true
  })
  other?: OtherModelRelationFilter | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  otherId?: IntFilter | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes when model is renamed: ExampleWhereUniqueInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class ExampleWhereUniqueInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  intIdField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: true
  })
  stringField?: string | undefined;
}
"
`;

exports[`inputs when model is renamed should properly generate input type classes when model is renamed: index 1`] = `
"export { BoolFieldUpdateOperationsInput } from \\"./BoolFieldUpdateOperationsInput\\";
export { BoolFilter } from \\"./BoolFilter\\";
export { DateTimeFieldUpdateOperationsInput } from \\"./DateTimeFieldUpdateOperationsInput\\";
export { DateTimeFilter } from \\"./DateTimeFilter\\";
export { ExampleCreateInput } from \\"./ExampleCreateInput\\";
export { ExampleCreateManyWithoutOtherInput } from \\"./ExampleCreateManyWithoutOtherInput\\";
export { ExampleCreateOrConnectWithoutotherInput } from \\"./ExampleCreateOrConnectWithoutotherInput\\";
export { ExampleCreateWithoutOtherInput } from \\"./ExampleCreateWithoutOtherInput\\";
export { ExampleListRelationFilter } from \\"./ExampleListRelationFilter\\";
export { ExampleOrderByInput } from \\"./ExampleOrderByInput\\";
export { ExampleScalarWhereInput } from \\"./ExampleScalarWhereInput\\";
export { ExampleUpdateInput } from \\"./ExampleUpdateInput\\";
export { ExampleUpdateManyMutationInput } from \\"./ExampleUpdateManyMutationInput\\";
export { ExampleUpdateManyWithWhereWithoutOtherInput } from \\"./ExampleUpdateManyWithWhereWithoutOtherInput\\";
export { ExampleUpdateManyWithoutOtherInput } from \\"./ExampleUpdateManyWithoutOtherInput\\";
export { ExampleUpdateWithWhereUniqueWithoutOtherInput } from \\"./ExampleUpdateWithWhereUniqueWithoutOtherInput\\";
export { ExampleUpdateWithoutOtherInput } from \\"./ExampleUpdateWithoutOtherInput\\";
export { ExampleUpsertWithWhereUniqueWithoutOtherInput } from \\"./ExampleUpsertWithWhereUniqueWithoutOtherInput\\";
export { ExampleWhereInput } from \\"./ExampleWhereInput\\";
export { ExampleWhereUniqueInput } from \\"./ExampleWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedBoolFilter } from \\"./NestedBoolFilter\\";
export { NestedDateTimeFilter } from \\"./NestedDateTimeFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { OtherModelCreateInput } from \\"./OtherModelCreateInput\\";
export { OtherModelCreateOneWithoutSampleModelInput } from \\"./OtherModelCreateOneWithoutSampleModelInput\\";
export { OtherModelCreateOrConnectWithoutSampleModelInput } from \\"./OtherModelCreateOrConnectWithoutSampleModelInput\\";
export { OtherModelCreateWithoutSampleModelInput } from \\"./OtherModelCreateWithoutSampleModelInput\\";
export { OtherModelOrderByInput } from \\"./OtherModelOrderByInput\\";
export { OtherModelRelationFilter } from \\"./OtherModelRelationFilter\\";
export { OtherModelUpdateInput } from \\"./OtherModelUpdateInput\\";
export { OtherModelUpdateManyMutationInput } from \\"./OtherModelUpdateManyMutationInput\\";
export { OtherModelUpdateOneRequiredWithoutSampleModelInput } from \\"./OtherModelUpdateOneRequiredWithoutSampleModelInput\\";
export { OtherModelUpdateWithoutSampleModelInput } from \\"./OtherModelUpdateWithoutSampleModelInput\\";
export { OtherModelUpsertWithoutSampleModelInput } from \\"./OtherModelUpsertWithoutSampleModelInput\\";
export { OtherModelWhereInput } from \\"./OtherModelWhereInput\\";
export { OtherModelWhereUniqueInput } from \\"./OtherModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs when prisma client is generated into node_modules should properly generate prisma client imports in input type class files: SampleWhereInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"@prisma/client\\";
import { IntFilter } from \\"../inputs/IntFilter\\";
import { StringFilter } from \\"../inputs/StringFilter\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class SampleWhereInput {
  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  AND?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  OR?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => [SampleWhereInput], {
    nullable: true
  })
  NOT?: SampleWhereInput[] | undefined;

  @TypeGraphQL.Field(_type => IntFilter, {
    nullable: true
  })
  idField?: IntFilter | undefined;

  @TypeGraphQL.Field(_type => StringFilter, {
    nullable: true
  })
  modelFieldName?: StringFilter | undefined;
}
"
`;

exports[`inputs when prisma client is generated into node_modules should properly generate prisma client imports in input type class files: index 1`] = `
"export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { SampleCreateInput } from \\"./SampleCreateInput\\";
export { SampleOrderByInput } from \\"./SampleOrderByInput\\";
export { SampleUpdateInput } from \\"./SampleUpdateInput\\";
export { SampleUpdateManyMutationInput } from \\"./SampleUpdateManyMutationInput\\";
export { SampleWhereInput } from \\"./SampleWhereInput\\";
export { SampleWhereUniqueInput } from \\"./SampleWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateOneWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"../inputs/FirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateOneWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  create?: FirstModelUncheckedCreateWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  connect?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelCreateOrConnectWithoutsecondModelsFieldInput, {
    nullable: true
  })
  connectOrCreate?: FirstModelCreateOrConnectWithoutsecondModelsFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateOrConnectWithoutsecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateOrConnectWithoutsecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: false
  })
  where!: FirstModelWhereUniqueInput;

  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  create!: FirstModelUncheckedCreateWithoutSecondModelsFieldInput;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelCreateWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelCreateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedCreateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { SecondModelUncheckedCreateManyWithoutFirstModelFieldInput } from \\"../inputs/SecondModelUncheckedCreateManyWithoutFirstModelFieldInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedCreateInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => SecondModelUncheckedCreateManyWithoutFirstModelFieldInput, {
    nullable: true
  })
  secondModelsField?: SecondModelUncheckedCreateManyWithoutFirstModelFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedCreateWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedCreateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true
  })
  idField?: number | undefined;

  @TypeGraphQL.Field(_type => String, {
    nullable: false
  })
  uniqueStringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false
  })
  floatField!: number;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput\\";
import { SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput } from \\"../inputs/SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput, {
    nullable: true
  })
  secondModelsField?: SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateManyInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateManyInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { IntFieldUpdateOperationsInput } from \\"../inputs/IntFieldUpdateOperationsInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUncheckedUpdateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => IntFieldUpdateOperationsInput, {
    nullable: true
  })
  idField?: IntFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"../inputs/FirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput\\";
import { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedUpdateWithoutSecondModelsFieldInput\\";
import { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUpsertWithoutSecondModelsFieldInput\\";
import { FirstModelWhereUniqueInput } from \\"../inputs/FirstModelWhereUniqueInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  create?: FirstModelUncheckedCreateWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelWhereUniqueInput, {
    nullable: true
  })
  connect?: FirstModelWhereUniqueInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelUncheckedUpdateWithoutSecondModelsFieldInput, {
    nullable: true
  })
  update?: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelUpsertWithoutSecondModelsFieldInput, {
    nullable: true
  })
  upsert?: FirstModelUpsertWithoutSecondModelsFieldInput | undefined;

  @TypeGraphQL.Field(_type => FirstModelCreateOrConnectWithoutsecondModelsFieldInput, {
    nullable: true
  })
  connectOrCreate?: FirstModelCreateOrConnectWithoutsecondModelsFieldInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpdateWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FloatFieldUpdateOperationsInput } from \\"../inputs/FloatFieldUpdateOperationsInput\\";
import { StringFieldUpdateOperationsInput } from \\"../inputs/StringFieldUpdateOperationsInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpdateWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => StringFieldUpdateOperationsInput, {
    nullable: true
  })
  uniqueStringField?: StringFieldUpdateOperationsInput | undefined;

  @TypeGraphQL.Field(_type => FloatFieldUpdateOperationsInput, {
    nullable: true
  })
  floatField?: FloatFieldUpdateOperationsInput | undefined;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: FirstModelUpsertWithoutSecondModelsFieldInputTSFile 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import GraphQLJSON from \\"graphql-type-json\\";
import { Prisma } from \\"../../../../helpers/prisma-client-mock\\";
import { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedCreateWithoutSecondModelsFieldInput\\";
import { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"../inputs/FirstModelUncheckedUpdateWithoutSecondModelsFieldInput\\";

@TypeGraphQL.InputType({
  isAbstract: true
})
export class FirstModelUpsertWithoutSecondModelsFieldInput {
  @TypeGraphQL.Field(_type => FirstModelUncheckedUpdateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  update!: FirstModelUncheckedUpdateWithoutSecondModelsFieldInput;

  @TypeGraphQL.Field(_type => FirstModelUncheckedCreateWithoutSecondModelsFieldInput, {
    nullable: false
  })
  create!: FirstModelUncheckedCreateWithoutSecondModelsFieldInput;
}
"
`;

exports[`inputs when useUncheckedScalarInputs mode is enabled should properly generate input type classes for filtering models by one to many relation fields: index 1`] = `
"export { FirstModelCreateInput } from \\"./FirstModelCreateInput\\";
export { FirstModelCreateOneWithoutSecondModelsFieldInput } from \\"./FirstModelCreateOneWithoutSecondModelsFieldInput\\";
export { FirstModelCreateOrConnectWithoutsecondModelsFieldInput } from \\"./FirstModelCreateOrConnectWithoutsecondModelsFieldInput\\";
export { FirstModelCreateWithoutSecondModelsFieldInput } from \\"./FirstModelCreateWithoutSecondModelsFieldInput\\";
export { FirstModelOrderByInput } from \\"./FirstModelOrderByInput\\";
export { FirstModelRelationFilter } from \\"./FirstModelRelationFilter\\";
export { FirstModelUncheckedCreateInput } from \\"./FirstModelUncheckedCreateInput\\";
export { FirstModelUncheckedCreateWithoutSecondModelsFieldInput } from \\"./FirstModelUncheckedCreateWithoutSecondModelsFieldInput\\";
export { FirstModelUncheckedUpdateInput } from \\"./FirstModelUncheckedUpdateInput\\";
export { FirstModelUncheckedUpdateManyInput } from \\"./FirstModelUncheckedUpdateManyInput\\";
export { FirstModelUncheckedUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUncheckedUpdateWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateInput } from \\"./FirstModelUpdateInput\\";
export { FirstModelUpdateManyMutationInput } from \\"./FirstModelUpdateManyMutationInput\\";
export { FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateOneRequiredWithoutSecondModelsFieldInput\\";
export { FirstModelUpdateWithoutSecondModelsFieldInput } from \\"./FirstModelUpdateWithoutSecondModelsFieldInput\\";
export { FirstModelUpsertWithoutSecondModelsFieldInput } from \\"./FirstModelUpsertWithoutSecondModelsFieldInput\\";
export { FirstModelWhereInput } from \\"./FirstModelWhereInput\\";
export { FirstModelWhereUniqueInput } from \\"./FirstModelWhereUniqueInput\\";
export { FloatFieldUpdateOperationsInput } from \\"./FloatFieldUpdateOperationsInput\\";
export { FloatFilter } from \\"./FloatFilter\\";
export { IntFieldUpdateOperationsInput } from \\"./IntFieldUpdateOperationsInput\\";
export { IntFilter } from \\"./IntFilter\\";
export { NestedFloatFilter } from \\"./NestedFloatFilter\\";
export { NestedIntFilter } from \\"./NestedIntFilter\\";
export { NestedStringFilter } from \\"./NestedStringFilter\\";
export { SecondModelCreateInput } from \\"./SecondModelCreateInput\\";
export { SecondModelCreateManyWithoutFirstModelFieldInput } from \\"./SecondModelCreateManyWithoutFirstModelFieldInput\\";
export { SecondModelCreateOrConnectWithoutfirstModelFieldInput } from \\"./SecondModelCreateOrConnectWithoutfirstModelFieldInput\\";
export { SecondModelCreateWithoutFirstModelFieldInput } from \\"./SecondModelCreateWithoutFirstModelFieldInput\\";
export { SecondModelListRelationFilter } from \\"./SecondModelListRelationFilter\\";
export { SecondModelOrderByInput } from \\"./SecondModelOrderByInput\\";
export { SecondModelScalarWhereInput } from \\"./SecondModelScalarWhereInput\\";
export { SecondModelUncheckedCreateInput } from \\"./SecondModelUncheckedCreateInput\\";
export { SecondModelUncheckedCreateManyWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedCreateManyWithoutFirstModelFieldInput\\";
export { SecondModelUncheckedCreateWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedCreateWithoutFirstModelFieldInput\\";
export { SecondModelUncheckedUpdateInput } from \\"./SecondModelUncheckedUpdateInput\\";
export { SecondModelUncheckedUpdateManyInput } from \\"./SecondModelUncheckedUpdateManyInput\\";
export { SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedUpdateManyWithoutFirstModelFieldInput\\";
export { SecondModelUncheckedUpdateManyWithoutSecondModelsFieldInput } from \\"./SecondModelUncheckedUpdateManyWithoutSecondModelsFieldInput\\";
export { SecondModelUncheckedUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUncheckedUpdateWithoutFirstModelFieldInput\\";
export { SecondModelUpdateInput } from \\"./SecondModelUpdateInput\\";
export { SecondModelUpdateManyMutationInput } from \\"./SecondModelUpdateManyMutationInput\\";
export { SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithWhereWithoutFirstModelFieldInput\\";
export { SecondModelUpdateManyWithoutFirstModelFieldInput } from \\"./SecondModelUpdateManyWithoutFirstModelFieldInput\\";
export { SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithWhereUniqueWithoutFirstModelFieldInput\\";
export { SecondModelUpdateWithoutFirstModelFieldInput } from \\"./SecondModelUpdateWithoutFirstModelFieldInput\\";
export { SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput } from \\"./SecondModelUpsertWithWhereUniqueWithoutFirstModelFieldInput\\";
export { SecondModelWhereInput } from \\"./SecondModelWhereInput\\";
export { SecondModelWhereUniqueInput } from \\"./SecondModelWhereUniqueInput\\";
export { StringFieldUpdateOperationsInput } from \\"./StringFieldUpdateOperationsInput\\";
export { StringFilter } from \\"./StringFilter\\";
"
`;
