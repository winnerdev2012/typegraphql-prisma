// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resolvers enhance should emit models and resolvers config map with types: enhance 1`] = `
"import * as crudResolvers from \\"./resolvers/crud/resolvers-crud.index\\";
import * as actionResolvers from \\"./resolvers/crud/resolvers-actions.index\\";
import * as models from \\"./models\\";

const crudResolversMap = {
  Client: crudResolvers.ClientCrudResolver,
  Post: crudResolvers.PostCrudResolver
};
const actionResolversMap = {
  Client: {
    client: actionResolvers.FindUniqueClientResolver,
    findFirstClient: actionResolvers.FindFirstClientResolver,
    clients: actionResolvers.FindManyClientResolver,
    createClient: actionResolvers.CreateClientResolver,
    deleteClient: actionResolvers.DeleteClientResolver,
    updateClient: actionResolvers.UpdateClientResolver,
    deleteManyClient: actionResolvers.DeleteManyClientResolver,
    updateManyClient: actionResolvers.UpdateManyClientResolver,
    upsertClient: actionResolvers.UpsertClientResolver,
    aggregateClient: actionResolvers.AggregateClientResolver
  },
  Post: {
    post: actionResolvers.FindUniquePostResolver,
    findFirstPost: actionResolvers.FindFirstPostResolver,
    posts: actionResolvers.FindManyPostResolver,
    createPost: actionResolvers.CreatePostResolver,
    deletePost: actionResolvers.DeletePostResolver,
    updatePost: actionResolvers.UpdatePostResolver,
    deleteManyPost: actionResolvers.DeleteManyPostResolver,
    updateManyPost: actionResolvers.UpdateManyPostResolver,
    upsertPost: actionResolvers.UpsertPostResolver,
    aggregatePost: actionResolvers.AggregatePostResolver
  }
};

type ResolverModelNames = keyof typeof crudResolversMap;

type ModelResolverActionNames<
  TModel extends ResolverModelNames
  > = keyof typeof crudResolversMap[TModel][\\"prototype\\"];

export type ResolverActionsConfig<TModel extends ResolverModelNames> = {
  [TActionName in ModelResolverActionNames<TModel>]?: MethodDecorator[];
};

export type ResolversEnhanceMap = {
  [TModel in ResolverModelNames]?: ResolverActionsConfig<TModel>;
};

export function applyResolversEnhanceMap(
  resolversEnhanceMap: ResolversEnhanceMap,
) {
  for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
    const modelName = resolversEnhanceMapKey as keyof typeof resolversEnhanceMap;
    const resolverActionsConfig = resolversEnhanceMap[modelName]!;
    for (const modelResolverActionName of Object.keys(resolverActionsConfig)) {
      const decorators = resolverActionsConfig[
        modelResolverActionName as keyof typeof resolverActionsConfig
      ] as MethodDecorator[];
      const crudTarget = crudResolversMap[modelName].prototype;
      const actionResolversConfig = actionResolversMap[modelName];
      const actionTarget = (actionResolversConfig[
        modelResolverActionName as keyof typeof actionResolversConfig
      ] as Function).prototype;
      for (const decorator of decorators) {
        decorator(
          crudTarget,
          modelResolverActionName,
          Object.getOwnPropertyDescriptor(crudTarget, modelResolverActionName)!,
        );
        decorator(
          actionTarget,
          modelResolverActionName,
          Object.getOwnPropertyDescriptor(actionTarget, modelResolverActionName)!,
        );
      }
    }
  }
}

type ModelNames = keyof typeof models;

type ModelFieldNames<
  TModel extends ModelNames
  > = keyof typeof models[TModel][\\"prototype\\"];

export type ModelFieldsConfig<TModel extends ModelNames> = {
  [TActionName in ModelFieldNames<TModel>]?: Array<PropertyDecorator>;
};

export type ModelsEnhanceMap = {
  [TModel in ModelNames]?: ModelFieldsConfig<TModel>;
};

export function applyModelsEnhanceMap(modelsEnhanceMap: ModelsEnhanceMap) {
  for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
    const modelName = modelsEnhanceMapKey as keyof typeof modelsEnhanceMap;
    const modelFieldsConfig = modelsEnhanceMap[modelName]!;
    for (const modelFieldName of Object.keys(modelFieldsConfig)) {
      const decorators = modelFieldsConfig[
        modelFieldName as keyof typeof modelFieldsConfig
      ] as Array<PropertyDecorator>;
      const modelTarget = models[modelName].prototype;
      for (const decorator of decorators) {
        decorator(modelTarget, modelFieldName);
      }
    }
  }
}


"
`;
