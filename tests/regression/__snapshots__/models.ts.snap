// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`models should properly generate object type class for prisma model with descriptions: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import { Post } from \\"../models/Post\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false,
    description: undefined,
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  intField!: number;

  posts?: Post[] | null;
}
"
`;

exports[`models should properly generate object type class for prisma model with different scalar fields types: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  intIdField!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false,
    description: undefined,
  })
  stringField!: string;

  @TypeGraphQL.Field(_type => String, {
    nullable: true,
    description: undefined,
  })
  optionalStringField?: string | null;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  intField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false,
    description: undefined,
  })
  floatField!: number;

  @TypeGraphQL.Field(_type => Boolean, {
    nullable: false,
    description: undefined,
  })
  booleanField!: boolean;

  @TypeGraphQL.Field(_type => Date, {
    nullable: false,
    description: undefined,
  })
  dateField!: Date;
}
"
`;

exports[`models should properly generate object type class for prisma model with enum and alias fields types: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import { Sample } from \\"../enums/Sample\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  intIdField!: number;

  @TypeGraphQL.Field(_type => TypeGraphQL.Float, {
    nullable: false,
    description: undefined,
  })
  aliasField!: number;

  @TypeGraphQL.Field(_type => Sample, {
    nullable: false,
    description: undefined,
  })
  enumField!: keyof typeof Sample;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: Post 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import { User } from \\"../models/User\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Post {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  author?: User;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  authorId!: number;
}
"
`;

exports[`models should properly generate object type classes for prisma models with cyclic relations: User 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";
import { Post } from \\"../models/Post\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class User {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  posts?: Post[] | null;
}
"
`;

exports[`models should properly generate object type classes for prisma models with self relations: Service 1`] = `
"import * as TypeGraphQL from \\"type-graphql\\";

@TypeGraphQL.ObjectType({
  isAbstract: true,
  description: undefined,
})
export class Service {
  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: false,
    description: undefined,
  })
  id!: number;

  @TypeGraphQL.Field(_type => String, {
    nullable: false,
    description: undefined,
  })
  name!: string;

  sourceService?: Service | null;

  @TypeGraphQL.Field(_type => TypeGraphQL.Int, {
    nullable: true,
    description: undefined,
  })
  sourceId?: number | null;

  services?: Service[] | null;
}
"
`;
